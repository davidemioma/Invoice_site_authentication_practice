{"version":3,"sources":["components/Auth/AuthForm.module.css","components/Layout/Nav.module.css","pages/Invoices/InvoicesPage.module.css","pages/invoice/Invoice.module.css","store/invoice-slice.js","store/index-redux.js","store/auth-context.js","hooks/use-input.js","components/Auth/AuthForm.js","pages/AuthPage/AuthPage.js","components/Layout/Nav.js","components/Invoices/EmptyInvoices.js","pages/HomePage/HomePage.js","components/Layout/Filters.js","components/Layout/Layout.js","components/Invoices/InvoiceItem.js","utils/utils.js","components/Invoices/InvoiceList.js","components/Form/Item.js","components/Form/NewForm.js","pages/Invoices/InvoicesPage.js","components/InvoiceDetail/InvoiceDetail.js","components/Form/EditItem.js","components/Form/EditForm.js","pages/invoice/InvoicePage.js","App.js","store/invoice-actions.js","index.js"],"names":["module","exports","invoiceSlice","createSlice","name","initialState","invoices","totalInvoices","changed","reducers","replaceInvoices","state","action","payload","addInvoice","newInvoice","find","invoice","id","push","deleteInvoice","filter","markInvoiceAsPaid","existingInvoice","findIndex","status","updateInvoice","updatedInvoice","store","configureStore","reducer","allInvoice","invoiceActions","actions","AuthContext","createContext","token","localId","isLoggedIn","login","logout","AuthContextProvider","props","useState","setToken","setLocalId","contextValue","useCallback","Provider","value","children","useInput","validate","enteredInput","setEnteredInput","isTouched","setIsTouched","inputIsValid","isValid","isInvalid","onChangeHandler","e","target","onBlurHandler","reset","AuthForm","authCtx","useContext","navigate","useNavigate","isLogin","setIsLogin","setIsLoading","includes","emailInput","enteredEmailIsValid","emailInputIsInvalid","emailChangeHandler","emailBlurHandler","resetEmailInput","length","passwordInput","enteredPasswordIsValid","passwordInputIsInvalid","passwordChangeHandler","passwordBlurHandler","resetPasswordInput","className","classes","formModal","onSubmit","url","preventDefault","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","Error","json","data","idToken","replace","catch","err","console","log","message","form","formInput","htmlFor","style","border","type","onChange","onBlur","btnAction","btnToggle","onClick","prevState","AuthPage","Nav","nav","navLogo","src","alt","imgDiv","avatar","EmptyInvoices","header","text","display","handleClick","task","HomePage","Filters","filterIsOpen","setFilterIsOpen","prev","dataset","onFilterValue","Layout","noOfInvoices","useSelector","getFilterValue","openForm","InvoiceItem","color","openDetail","toName","dueDate","totalAmount","getDueDate","date","terms","formatter","Intl","DateTimeFormat","navigator","language","month","year","day","dateObj","Date","format","formatDate","getTime","InvoiceList","map","amount","itemList","item","price","qty","reduce","a","b","invoiceDate","to","Item","btnClicked","setBtnClicked","errorText","trim","itemNameInput","entereditemNameIsValid","itemNameInputIsInvalid","itemNameChangeHandler","itemNameBlurHandler","resetitemNameInput","qtyInput","enteredqtyIsValid","qtyInputIsInvalid","qtyChangeHandler","qtyBlurHandler","resetqtyInput","priceInput","enteredpriceIsValid","priceInputIsInvalid","priceChangeHandler","priceBlurHandler","resetpriceInput","total","onSubmitHandler","invoiceItem","itemName","onItemValue","min","max","onDelete","disabled","NewForm","dispatch","useDispatch","randomId","Math","floor","random","component","setComponent","invoiceItemList","setInvoiceItemList","termValue","setTermValue","onDeleteHandler","i","getItemValue","addressInput","enteredAddressIsValid","addressInputIsInvalid","addressChangeHandler","addressBlurHandler","resetAddressInput","cityInput","enteredCityIsValid","cityInputIsInvalid","cityChangeHandler","cityBlurHandler","resetCityInput","postCodeInput","enteredpostCodeIsValid","postCodeInputIsInvalid","postCodeChangeHandler","postCodeBlurHandler","resetpostCodeInput","countryInput","enteredcountryIsValid","countryInputIsInvalid","countryChangeHandler","countryBlurHandler","resetcountryInput","clientNameInput","enteredclientNameIsValid","clientNameInputIsInvalid","clientNameChangeHandler","clientNameBlurHandler","resetclientNameInput","clientEmailInput","enteredclientEmailIsValid","clientEmailInputIsInvalid","clientEmailChangeHandler","clientEmailBlurHandler","resetclientEmailInput","clientAddressInput","enteredclientAddressIsValid","clientAddressInputIsInvalid","clientAddressChangeHandler","clientAddressBlurHandler","resetclientAddressInput","clientCityInput","enteredclientCityIsValid","clientCityInputIsInvalid","clientCityChangeHandler","clientCityBlurHandler","resetclientCityInput","clientPostCodeInput","enteredclientPostCodeIsValid","clientPostCodeInputIsInvalid","clientPostCodeChangeHandler","clientPostCodeBlurHandler","resetclientPostCodeInput","clientCountryInput","enteredclientCountryIsValid","clientCountryInputIsInvalid","clientCountryChangeHandler","clientCountryBlurHandler","resetclientCountryInput","invoiceDateInput","enteredinvoiceDateIsValid","invoiceDateInputIsInvalid","invoiceDateChangeHandler","invoiceDateBlurHandler","resetinvoiceDateInput","descriptionInput","entereddescriptionIsValid","descriptionInputIsInvalid","descriptionChangeHandler","descriptionBlurHandler","resetdescriptionInput","resetForm","closeForm","backdropClasses","show","modalClasses","join","from","address","city","postCode","country","mail","desc","toString","InvoicesPage","filterValue","setFilterValue","modalOpen","setModalOpen","filteredInvoices","toLowerCase","home","navBar","InvoiceDetail","params","useParams","invoiceId","invoiceData","onMarkAsPaidHandler","isPaid","onGoBack","EditItem","nameInputRef","useRef","qtyInputRef","priceInputRef","defaultValue","ref","current","EditForm","getEditItemValue","d","dd","mm","yyyy","formatEditDate","setAddressInput","setCityInput","postcodeInput","setPostcodeInput","setCountryInput","setClientNameInput","clientMailInput","setClientMailInput","setClientAddressInput","setClientCityInput","setClientPostCodeInput","setClientCountryInput","setInvoiceDateInput","setDescriptionInput","InvoicePage","isInitial","App","useEffect","page","fetchData","key","result","error","sendRequest","sendInvoiceData","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.346ea8b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formModal\":\"AuthForm_formModal__78CxL\",\"form\":\"AuthForm_form__3ZLEX\",\"formInput\":\"AuthForm_formInput__3aDfe\",\"actions\":\"AuthForm_actions__1VNhY\",\"btnAction\":\"AuthForm_btnAction__2hrA7\",\"btnToggle\":\"AuthForm_btnToggle__2aCAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__WI6aX\",\"navLogo\":\"Nav_navLogo__wosKO\",\"imgDiv\":\"Nav_imgDiv__3eSF8\",\"avatar\":\"Nav_avatar__1VOSE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"InvoicesPage_home__2Eh64\",\"navBar\":\"InvoicesPage_navBar__32wDS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"invoice\":\"Invoice_invoice__2yATv\",\"navBar\":\"Invoice_navBar__1BTN9\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst invoiceSlice = createSlice({\n  name: \"invoices\",\n  initialState: {\n    invoices: [],\n    totalInvoices: 0,\n    changed: false,\n  },\n  reducers: {\n    replaceInvoices(state, action) {\n      state.invoices = action.payload.invoices;\n      state.totalInvoices = action.payload.totalInvoices;\n    },\n\n    addInvoice(state, action) {\n      const newInvoice = action.payload;\n\n      const existingInvoice = state.invoices.find(\n        (invoice) => invoice.id === newInvoice.id\n      );\n\n      if (!existingInvoice) {\n        state.invoices.push(newInvoice);\n        state.totalInvoices++;\n      }\n\n      state.changed = true;\n    },\n\n    deleteInvoice(state, action) {\n      const id = action.payload;\n\n      const existingInvoice = state.invoices.find(\n        (invoice) => invoice.id === id\n      );\n\n      if (existingInvoice) {\n        state.invoices = state.invoices.filter((invoice) => invoice.id !== id);\n        state.totalInvoices--;\n      }\n\n      state.changed = true;\n    },\n\n    markInvoiceAsPaid(state, action) {\n      const id = action.payload;\n\n      const existingInvoice = state.invoices.findIndex(\n        (invoice) => invoice.id === id\n      );\n\n      if (state.invoices[existingInvoice]) {\n        state.invoices[existingInvoice].status = \"Paid\";\n      }\n\n      state.changed = true;\n    },\n\n    updateInvoice(state, action) {\n      const updatedInvoice = action.payload;\n\n      const existingInvoice = state.invoices.findIndex(\n        (invoice) => invoice.id === updatedInvoice.id\n      );\n\n      if (state.invoices[existingInvoice]) {\n        state.invoices[existingInvoice] = updatedInvoice;\n      }\n\n      state.changed = true;\n    },\n  },\n});\n\nexport default invoiceSlice;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport invoiceSlice from \"./invoice-slice\";\n\nconst store = configureStore({\n  reducer: { allInvoice: invoiceSlice.reducer },\n});\n\nexport const invoiceActions = invoiceSlice.actions;\n\nexport default store;\n","import { createContext, useCallback, useState } from \"react\";\n\nconst AuthContext = createContext({\n  token: \"\",\n  localId: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nexport const AuthContextProvider = (props) => {\n  const [token, setToken] = useState(null);\n\n  const [localId, setLocalId] = useState(null);\n\n  const userIsLoggedIn = !!token && !!localId;\n\n  const logoutHandler = useCallback(() => {\n    setToken(null);\n\n    setLocalId(null);\n  }, []);\n\n  const loginHandler = (token, localId) => {\n    setToken(token);\n\n    setLocalId(localId);\n  };\n\n  const contextValue = {\n    token: token,\n    localId: localId,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n","import { useState } from \"react\";\n\nfunction useInput(validate) {\n  const [enteredInput, setEnteredInput] = useState(\"\");\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const inputIsValid = validate(enteredInput);\n\n  const InputIsInvalid = !inputIsValid && isTouched;\n\n  const onChangeHandler = (e) => {\n    setEnteredInput(e.target.value);\n  };\n\n  const onBlurHandler = (e) => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredInput(\"\");\n\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredInput,\n    isValid: inputIsValid,\n    isInvalid: InputIsInvalid,\n    onChangeHandler: onChangeHandler,\n    onBlurHandler: onBlurHandler,\n    reset: reset,\n  };\n}\n\nexport default useInput;\n","import classes from \"./AuthForm.module.css\";\nimport { useContext, useState } from \"react\";\nimport useInput from \"../../hooks/use-input\";\nimport { useNavigate } from \"react-router\";\nimport AuthContext from \"../../store/auth-context\";\n\nfunction AuthForm() {\n  const authCtx = useContext(AuthContext);\n\n  const navigate = useNavigate();\n\n  const [isLogin, setIsLogin] = useState(true);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const {\n    value: emailInput,\n    isValid: enteredEmailIsValid,\n    isInvalid: emailInputIsInvalid,\n    onChangeHandler: emailChangeHandler,\n    onBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput(\n    (value) => value.includes(\"@gmail.com\") || value.includes(\"@yahoo.com\")\n  );\n\n  const {\n    value: passwordInput,\n    isValid: enteredPasswordIsValid,\n    isInvalid: passwordInputIsInvalid,\n    onChangeHandler: passwordChangeHandler,\n    onBlurHandler: passwordBlurHandler,\n    reset: resetPasswordInput,\n  } = useInput((value) => value.length > 5);\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (!enteredPasswordIsValid && !enteredEmailIsValid) return;\n\n    setIsLoading(true);\n\n    let url;\n\n    if (isLogin) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBJS92owOW5SpmqXUS3gSDlkI-VHk8H0qM\";\n    } else {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBJS92owOW5SpmqXUS3gSDlkI-VHk8H0qM\";\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: emailInput,\n        password: passwordInput,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Could not send request\");\n        }\n\n        return res.json();\n      })\n      .then((data) => {\n        authCtx.login(data.idToken, data.localId);\n\n        navigate(\"/invoices\", { replace: true });\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n\n    resetEmailInput();\n\n    resetPasswordInput();\n  };\n\n  return (\n    <div className={classes.formModal}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={onSubmitHandler} className={classes.form}>\n        <div className={classes.formInput}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            style={{ border: emailInputIsInvalid ? \"red\" : \"none\" }}\n            value={emailInput}\n            type=\"email\"\n            id=\"email\"\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n          />\n        </div>\n\n        <div className={classes.formInput}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            style={{ border: passwordInputIsInvalid ? \"red\" : \"none\" }}\n            value={passwordInput}\n            type=\"password\"\n            id=\"password\"\n            onChange={passwordChangeHandler}\n            onBlur={passwordBlurHandler}\n          />\n        </div>\n\n        <div className={classes.actions}>\n          <button className={classes.btnAction}>\n            {isLogin ? \"Login\" : \"Sign Up \"}\n          </button>\n\n          <button\n            className={classes.btnToggle}\n            onClick={switchAuthModeHandler}\n            type=\"button\"\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default AuthForm;\n","import AuthForm from \"../../components/Auth/AuthForm\";\n\nfunction AuthPage() {\n  return <AuthForm />;\n}\n\nexport default AuthPage;\n","import classes from \"./Nav.module.css\";\n\nfunction Nav() {\n  return (\n    <nav className={classes.nav}>\n      <img className={classes.navLogo} src={\"/static/images/logo.svg\"} alt=\"\" />\n\n      <div className={classes.imgDiv}>\n        <img src={\"/static/images/icon-sun.svg\"} alt=\"\" />\n        <div className={classes.avatar}>\n          <img src={\"/static/images/image-avatar.jpg\"} alt=\"\" />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import \"./EmptyInvoices.css\";\n\nfunction EmptyInvoices(props) {\n  return (\n    <div className=\"emptyList\">\n      <img src={\"/static/images/illustration-empty.svg\"} alt=\"\" />\n\n      <span className=\"emptytitle\">\n        <h1>{props.header}</h1>\n        <p>{props.text}</p>\n      </span>\n\n      <button style={{ display: props.display }} onClick={props.handleClick}>\n        {props.task}\n      </button>\n    </div>\n  );\n}\n\nexport default EmptyInvoices;\n","import Nav from \"../../components/Layout/Nav\";\nimport EmptyInvoices from \"../../components/Invoices/EmptyInvoices\";\nimport { useNavigate } from \"react-router\";\n\nfunction HomePage() {\n  const navigate = useNavigate();\n\n  const onClickHandler = () => {\n    navigate(\"/auth\", { push: true });\n  };\n\n  return (\n    <div>\n      <div>\n        <Nav />\n      </div>\n\n      <EmptyInvoices\n        header={\"Welcome\"}\n        text={\"Login or create an accout to add invoices\"}\n        display={\"inline-flex\"}\n        task={\"Login or Sign up\"}\n        handleClick={onClickHandler}\n      />\n    </div>\n  );\n}\n\nexport default HomePage;\n","import { useState } from \"react\";\nimport \"./Filters.css\";\n\nfunction Filters(props) {\n  const [filterIsOpen, setFilterIsOpen] = useState(false);\n\n  const toggleFilter = () => {\n    setFilterIsOpen((prev) => !prev);\n  };\n\n  const onFiltersClickhandler = (e) => {\n    if (e.target.dataset.value) {\n      props.onFilterValue(e.target.dataset.value);\n    }\n  };\n\n  return (\n    <div className=\"filters\">\n      <div onClick={toggleFilter} className=\"filterTop\">\n        <span>Filter</span>\n        <img\n          className={filterIsOpen ? \"rotate\" : \"\"}\n          src={\"/static/images/icon-arrow-down.svg\"}\n          alt=\"\"\n        />\n      </div>\n\n      {filterIsOpen && (\n        <div onClick={onFiltersClickhandler} className=\"filterList\">\n          <p data-value=\"all\">All</p>\n          <p data-value=\"paid\">Paid</p>\n          <p data-value=\"pending\">Pending</p>\n          <p data-value=\"draft\">Draft</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Filters;\n","import Filters from \"./Filters\";\nimport \"./Layout.css\";\nimport { useSelector } from \"react-redux\";\nimport AuthContext from \"../../store/auth-context\";\nimport { useContext } from \"react\";\n\nfunction Layout(props) {\n  const authCtx = useContext(AuthContext);\n\n  const noOfInvoices = useSelector((state) => state.allInvoice.totalInvoices);\n\n  const getFilterValue = (value) => {\n    props.getFilterValue(value);\n  };\n\n  const onLogoutHandler = () => {\n    authCtx.logout();\n  };\n\n  return (\n    <div className=\"container layout \">\n      <header className=\"header\">\n        <div className=\"invo\">\n          <span>Invoices</span>\n          <span className=\"amount\">{noOfInvoices} invoices</span>\n        </div>\n\n        <div className=\"options\">\n          <Filters onFilterValue={getFilterValue} />\n\n          <button onClick={props.openForm}>\n            <span>\n              <img src={\"/static/images/icon-plus.svg\"} alt=\"\" />\n            </span>\n            New\n          </button>\n\n          <button onClick={onLogoutHandler}>Logout</button>\n        </div>\n      </header>\n\n      <main>{props.children}</main>\n    </div>\n  );\n}\n\nexport default Layout;\n","import \"./InvoiceItem.css\";\nimport { useNavigate } from \"react-router\";\n\nfunction InvoiceItem(props) {\n  let color;\n\n  if (props.status === \"Paid\") {\n    color = \"green\";\n  } else if (props.status === \"Pending\") {\n    color = \"orange\";\n  } else {\n    color = \"grey\";\n  }\n\n  const navigate = useNavigate();\n\n  const openDetail = () => {\n    navigate(`/invoices/${props.id}`);\n  };\n\n  return (\n    <div onClick={openDetail} className=\"invoice\">\n      <p className=\"invoiceId\">\n        <span>#</span>\n        {props.id}\n      </p>\n\n      <p className=\"name\">{props.toName}</p>\n\n      <div className=\"invoiceInfo\">\n        <p className=\"date\">\n          <span>Due</span> {props.dueDate}\n        </p>\n        <p className=\"amount\">{props.totalAmount}</p>\n      </div>\n\n      <div className=\"invoiceStatus\">\n        <div className={`status ${color}`}>\n          <span className=\"dot\"></span>\n          <span className=\"statusName\">{props.status}</span>\n        </div>\n\n        <img\n          onClick={openDetail}\n          src={\"/static/images/icon-arrow-right.svg\"}\n          alt=\"\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default InvoiceItem;\n","export function formatDate(date) {\n  const formatter = new Intl.DateTimeFormat(navigator.language || \"eu\", {\n    month: \"short\",\n    year: \"numeric\",\n    day: \"2-digit\",\n  });\n\n  const dateObj = new Date(date);\n  return formatter.format(dateObj);\n}\n\nexport function formatEditDate(date) {\n  const d = new Date(date);\n  const dd = new Intl.DateTimeFormat(\"en\", { day: \"2-digit\" }).format(d);\n  const mm = new Intl.DateTimeFormat(\"en\", { month: \"2-digit\" }).format(d);\n  const yyyy = new Intl.DateTimeFormat(\"en\", { year: \"numeric\" }).format(d);\n  const newDate = `${yyyy}-${mm}-${dd}`;\n\n  return newDate;\n}\n\nexport function getDueDate(date, terms) {\n  const futureTime = terms * 24 * 60 * 60 * 1000;\n\n  const dateTime = new Date(date).getTime();\n\n  const newDate = futureTime + dateTime;\n\n  const dueDate = formatDate(newDate);\n\n  return dueDate;\n}\n\nexport const calcExpiringTime = (time) => {\n  const currentTime = new Date().getTime();\n\n  const expiringTime = new Date(time).getTime();\n\n  const remainingTime = expiringTime - currentTime;\n\n  return remainingTime;\n};\n\nexport const retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n\n  const storedExpiringTime = localStorage.getItem(\"expiringTime\");\n\n  const storedLocalId = localStorage.getItem(\"localID\");\n\n  const remainingTime = calcExpiringTime(storedExpiringTime);\n\n  if (remainingTime <= 3600) {\n    localStorage.removeItem(\"token\");\n\n    localStorage.removeItem(\"localID\");\n\n    localStorage.removeItem(\"expiringTime\");\n\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    localId: storedLocalId,\n    duration: remainingTime,\n  };\n};\n","import \"./InvoiceList.css\";\nimport InvoiceItem from \"./InvoiceItem\";\nimport { getDueDate } from \"../../utils/utils\";\nimport EmptyInvoices from \"./EmptyInvoices\";\n\nfunction InvoiceList(props) {\n  if (props.invoices.length <= 0) {\n    return (\n      <EmptyInvoices\n        display={\"none\"}\n        header={\"There is nothing here\"}\n        text={\"Create on invoice by clicking the New button and get started\"}\n      />\n    );\n  }\n\n  return (\n    <div className=\" list\">\n      {props.invoices.map((invoice) => {\n        const amount = invoice.itemList.map((item) => item.price * item.qty);\n\n        if (amount.length <= 0) {\n          return;\n        }\n\n        const totalAmount = amount.reduce((a, b) => a + b);\n\n        const dueDate = getDueDate(invoice.invoiceDate, invoice.terms);\n\n        return (\n          <InvoiceItem\n            key={invoice.id}\n            id={invoice.id}\n            toName={invoice.to.name}\n            dueDate={dueDate}\n            totalAmount={`£${totalAmount}`}\n            status={invoice.status}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default InvoiceList;\n","import \"./Item.css\";\nimport useInput from \"../../hooks/use-input\";\nimport { useState } from \"react\";\n\nfunction Item(props) {\n  const [btnClicked, setBtnClicked] = useState(false);\n\n  const errorText = <p className=\"errorText\">Input must not be empty</p>;\n\n  const onClickHandler = (e) => {\n    e.preventDefault();\n\n    props.onDelete(props.id);\n  };\n\n  const {\n    value: itemNameInput,\n    isValid: entereditemNameIsValid,\n    isInvalid: itemNameInputIsInvalid,\n    onChangeHandler: itemNameChangeHandler,\n    onBlurHandler: itemNameBlurHandler,\n    reset: resetitemNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: qtyInput,\n    isValid: enteredqtyIsValid,\n    isInvalid: qtyInputIsInvalid,\n    onChangeHandler: qtyChangeHandler,\n    onBlurHandler: qtyBlurHandler,\n    reset: resetqtyInput,\n  } = useInput((value) => value > 0);\n\n  const {\n    value: priceInput,\n    isValid: enteredpriceIsValid,\n    isInvalid: priceInputIsInvalid,\n    onChangeHandler: priceChangeHandler,\n    onBlurHandler: priceBlurHandler,\n    reset: resetpriceInput,\n  } = useInput((value) => value > 0);\n\n  const total = qtyInput * priceInput;\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (!entereditemNameIsValid && !enteredqtyIsValid && !enteredpriceIsValid) {\n      return;\n    }\n\n    setBtnClicked(true);\n\n    const invoiceItem = {\n      itemName: itemNameInput,\n      qty: qtyInput,\n      price: priceInput,\n      total: total,\n      id: props.id,\n    };\n\n    props.onItemValue(invoiceItem, e);\n\n    resetitemNameInput();\n    resetqtyInput();\n    resetpriceInput();\n  };\n\n  return (\n    <form onSubmit={onSubmitHandler} className=\"item\">\n      <div className=\"formInput\">\n        <label htmlFor=\"itemName\">Item Name</label>\n        <input\n          value={itemNameInput}\n          type=\"text\"\n          id=\"itemName\"\n          onChange={itemNameChangeHandler}\n          onBlur={itemNameBlurHandler}\n        />\n        {itemNameInputIsInvalid && errorText}\n      </div>\n\n      <div className=\"itemGrid\">\n        <div className=\"formInput\">\n          <label htmlFor=\"qty\">Qty.</label>\n          <input\n            value={qtyInput}\n            type=\"number\"\n            id=\"qty\"\n            min=\"1\"\n            max=\"10\"\n            onChange={qtyChangeHandler}\n            onBlur={qtyBlurHandler}\n          />\n          {qtyInputIsInvalid && errorText}\n        </div>\n\n        <div className=\"formInput\">\n          <label htmlFor=\"price\">Price</label>\n          <input\n            value={priceInput}\n            type=\"number\"\n            min=\"1\"\n            max=\"10\"\n            id=\"price\"\n            onChange={priceChangeHandler}\n            onBlur={priceBlurHandler}\n          />\n          {priceInputIsInvalid && errorText}\n        </div>\n\n        <div className=\"total\">\n          <span>Total</span>\n          <p>{total}</p>\n        </div>\n\n        <button className=\"removeItem\">\n          <img\n            onClick={onClickHandler}\n            src={\"/static/images/icon-delete.svg\"}\n            alt=\"\"\n          />\n        </button>\n\n        <button\n          className=\"btnAddToList\"\n          onClick={onSubmitHandler}\n          disabled={btnClicked}\n        >\n          {!btnClicked && <img src=\"/static/images/icon-plus.svg\" alt=\"\" />}\n          {btnClicked && <img src=\"/static/images/icon-check.svg\" alt=\"\" />}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Item;\n","import { Fragment, useState } from \"react\";\nimport \"./NewForm.css\";\nimport Item from \"./Item\";\nimport useInput from \"../../hooks/use-input\";\nimport { useDispatch } from \"react-redux\";\nimport { invoiceActions } from \"../../store/index-redux\";\n\nfunction NewForm(props) {\n  const dispatch = useDispatch();\n\n  const randomId = Math.floor(100000 + Math.random() * 900000);\n\n  const [component, setComponent] = useState([\"sampleComponent\"]);\n\n  const [invoiceItemList, setInvoiceItemList] = useState([]);\n\n  //To Get the term value from select Input\n  const [termValue, setTermValue] = useState(\"1\");\n\n  const getTermValue = (e) => {\n    if (e.target.value) {\n      setTermValue(e.target.value);\n    }\n  };\n\n  //Adding, Removing and getting the Invoice items\n  const onAddItemHandler = (e) => {\n    e.preventDefault();\n\n    setComponent((prev) => [...prev, \"sampleComponent\"]);\n  };\n\n  const onDeleteHandler = (id) => {\n    setComponent((prev) => prev.filter((item, i) => i !== id));\n  };\n\n  const getItemValue = (value) => {\n    setInvoiceItemList((prev) => [...prev, value]);\n  };\n\n  //Input Validation\n  const errorText = <p className=\"errorText\">Input must not be empty</p>;\n\n  const {\n    value: addressInput,\n    isValid: enteredAddressIsValid,\n    isInvalid: addressInputIsInvalid,\n    onChangeHandler: addressChangeHandler,\n    onBlurHandler: addressBlurHandler,\n    reset: resetAddressInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: cityInput,\n    isValid: enteredCityIsValid,\n    isInvalid: cityInputIsInvalid,\n    onChangeHandler: cityChangeHandler,\n    onBlurHandler: cityBlurHandler,\n    reset: resetCityInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: postCodeInput,\n    isValid: enteredpostCodeIsValid,\n    isInvalid: postCodeInputIsInvalid,\n    onChangeHandler: postCodeChangeHandler,\n    onBlurHandler: postCodeBlurHandler,\n    reset: resetpostCodeInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: countryInput,\n    isValid: enteredcountryIsValid,\n    isInvalid: countryInputIsInvalid,\n    onChangeHandler: countryChangeHandler,\n    onBlurHandler: countryBlurHandler,\n    reset: resetcountryInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientNameInput,\n    isValid: enteredclientNameIsValid,\n    isInvalid: clientNameInputIsInvalid,\n    onChangeHandler: clientNameChangeHandler,\n    onBlurHandler: clientNameBlurHandler,\n    reset: resetclientNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientEmailInput,\n    isValid: enteredclientEmailIsValid,\n    isInvalid: clientEmailInputIsInvalid,\n    onChangeHandler: clientEmailChangeHandler,\n    onBlurHandler: clientEmailBlurHandler,\n    reset: resetclientEmailInput,\n  } = useInput((value) => value.includes(\"@\"));\n\n  const {\n    value: clientAddressInput,\n    isValid: enteredclientAddressIsValid,\n    isInvalid: clientAddressInputIsInvalid,\n    onChangeHandler: clientAddressChangeHandler,\n    onBlurHandler: clientAddressBlurHandler,\n    reset: resetclientAddressInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientCityInput,\n    isValid: enteredclientCityIsValid,\n    isInvalid: clientCityInputIsInvalid,\n    onChangeHandler: clientCityChangeHandler,\n    onBlurHandler: clientCityBlurHandler,\n    reset: resetclientCityInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientPostCodeInput,\n    isValid: enteredclientPostCodeIsValid,\n    isInvalid: clientPostCodeInputIsInvalid,\n    onChangeHandler: clientPostCodeChangeHandler,\n    onBlurHandler: clientPostCodeBlurHandler,\n    reset: resetclientPostCodeInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientCountryInput,\n    isValid: enteredclientCountryIsValid,\n    isInvalid: clientCountryInputIsInvalid,\n    onChangeHandler: clientCountryChangeHandler,\n    onBlurHandler: clientCountryBlurHandler,\n    reset: resetclientCountryInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: invoiceDateInput,\n    isValid: enteredinvoiceDateIsValid,\n    isInvalid: invoiceDateInputIsInvalid,\n    onChangeHandler: invoiceDateChangeHandler,\n    onBlurHandler: invoiceDateBlurHandler,\n    reset: resetinvoiceDateInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: descriptionInput,\n    isValid: entereddescriptionIsValid,\n    isInvalid: descriptionInputIsInvalid,\n    onChangeHandler: descriptionChangeHandler,\n    onBlurHandler: descriptionBlurHandler,\n    reset: resetdescriptionInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const resetForm = () => {\n    resetAddressInput();\n    resetCityInput();\n    resetpostCodeInput();\n    resetcountryInput();\n    resetclientCountryInput();\n    resetclientEmailInput();\n    resetclientNameInput();\n    resetclientAddressInput();\n    resetclientCityInput();\n    resetclientPostCodeInput();\n    resetclientCountryInput();\n    resetinvoiceDateInput();\n    setTermValue(\"\");\n    resetdescriptionInput();\n    setInvoiceItemList([]);\n\n    props.closeForm();\n  };\n\n  //On Save and Send Button Clicked\n  const onSaveAndSend = () => {\n    if (\n      !enteredAddressIsValid ||\n      !enteredCityIsValid ||\n      !enteredpostCodeIsValid ||\n      !enteredcountryIsValid ||\n      !enteredclientNameIsValid ||\n      !enteredclientEmailIsValid ||\n      !enteredclientAddressIsValid ||\n      !enteredclientCityIsValid ||\n      !enteredclientPostCodeIsValid ||\n      !enteredclientCountryIsValid ||\n      !enteredinvoiceDateIsValid ||\n      !entereddescriptionIsValid ||\n      termValue === \"\" ||\n      invoiceItemList.length <= 0\n    ) {\n      return;\n    }\n\n    const invoice = {\n      from: {\n        address: addressInput,\n        city: cityInput,\n        postCode: postCodeInput,\n        country: countryInput,\n      },\n      to: {\n        mail: clientEmailInput,\n        name: clientNameInput,\n        address: clientAddressInput,\n        city: clientCityInput,\n        postCode: clientPostCodeInput,\n        country: clientCountryInput,\n      },\n      invoiceDate: invoiceDateInput,\n      terms: termValue,\n      desc: descriptionInput,\n      itemList: invoiceItemList,\n      status: \"Pending\",\n      id: randomId.toString(),\n    };\n\n    dispatch(invoiceActions.addInvoice(invoice));\n\n    resetForm();\n  };\n\n  //On Save as draft Button Clicked\n  const onSaveAsDraft = () => {\n    if (\n      !enteredAddressIsValid ||\n      !enteredCityIsValid ||\n      !enteredpostCodeIsValid ||\n      !enteredcountryIsValid ||\n      !enteredclientNameIsValid ||\n      !enteredclientEmailIsValid ||\n      !enteredclientAddressIsValid ||\n      !enteredclientCityIsValid ||\n      !enteredclientPostCodeIsValid ||\n      !enteredclientCountryIsValid ||\n      !enteredinvoiceDateIsValid ||\n      !entereddescriptionIsValid ||\n      termValue === \"\" ||\n      invoiceItemList.length <= 0\n    ) {\n      return;\n    }\n\n    const invoice = {\n      from: {\n        address: addressInput,\n        city: cityInput,\n        postCode: postCodeInput,\n        country: countryInput,\n      },\n      to: {\n        mail: clientEmailInput,\n        name: clientNameInput,\n        address: clientAddressInput,\n        city: clientCityInput,\n        postCode: clientPostCodeInput,\n        country: clientCountryInput,\n      },\n      invoiceDate: invoiceDateInput,\n      terms: termValue,\n      desc: descriptionInput,\n      itemList: invoiceItemList,\n      status: \"Draft\",\n      id: randomId.toString(),\n    };\n\n    dispatch(invoiceActions.addInvoice(invoice));\n\n    resetForm();\n  };\n\n  //On Discard Button Clicked\n  const ondiscardHandler = (e) => {\n    e.preventDefault();\n\n    resetForm();\n  };\n\n  const backdropClasses = [\n    \"backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClosed\",\n  ];\n\n  const modalClasses = [\"formModal\", props.show ? \"ModalOpen\" : \"ModalClosed\"];\n\n  return (\n    <Fragment>\n      {props.show && (\n        <div\n          onClick={props.closeForm}\n          className={backdropClasses.join(\" \")}\n        ></div>\n      )}\n\n      {props.show && (\n        <div className={modalClasses.join(\" \")}>\n          <button onClick={props.closeForm} className=\"backBtn\">\n            <img src={\"/static/images/icon-arrow-left.svg\"} alt=\"\" />\n            Go Back\n          </button>\n\n          <h2>New Invoice</h2>\n\n          <div className=\"form\">\n            <p>Bill Form</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"address\">Street Address</label>\n              <input\n                value={addressInput}\n                type=\"text\"\n                id=\"address\"\n                onChange={addressChangeHandler}\n                onBlur={addressBlurHandler}\n              />\n              {addressInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"city\">City</label>\n                <input\n                  value={cityInput}\n                  type=\"text\"\n                  id=\"city\"\n                  onChange={cityChangeHandler}\n                  onBlur={cityBlurHandler}\n                />\n                {cityInputIsInvalid && errorText}\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"postCode\">Post Code</label>\n                <input\n                  value={postCodeInput}\n                  type=\"text\"\n                  id=\"postCode\"\n                  onChange={postCodeChangeHandler}\n                  onBlur={postCodeBlurHandler}\n                />\n                {postCodeInputIsInvalid && errorText}\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"country\">Country</label>\n              <input\n                value={countryInput}\n                type=\"text\"\n                id=\"country\"\n                onChange={countryChangeHandler}\n                onBlur={countryBlurHandler}\n              />\n              {countryInputIsInvalid && errorText}\n            </div>\n\n            <p>Bill To</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientName\">Client's Name</label>\n              <input\n                value={clientNameInput}\n                type=\"text\"\n                id=\"clientName\"\n                onChange={clientNameChangeHandler}\n                onBlur={clientNameBlurHandler}\n              />\n              {clientNameInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientEmail\">Client's Email</label>\n              <input\n                value={clientEmailInput}\n                type=\"email\"\n                id=\"clientEmail\"\n                onChange={clientEmailChangeHandler}\n                onBlur={clientEmailBlurHandler}\n              />\n              {clientEmailInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientAddress\">Street Address</label>\n              <input\n                value={clientAddressInput}\n                type=\"text\"\n                id=\"clientAddress\"\n                onChange={clientAddressChangeHandler}\n                onBlur={clientAddressBlurHandler}\n              />\n              {clientAddressInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"clientCity\">City</label>\n                <input\n                  value={clientCityInput}\n                  type=\"text\"\n                  id=\"clientCity\"\n                  onChange={clientCityChangeHandler}\n                  onBlur={clientCityBlurHandler}\n                />\n                {clientCityInputIsInvalid && errorText}\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"clientPostCode\">Post Code</label>\n                <input\n                  value={clientPostCodeInput}\n                  type=\"text\"\n                  id=\"clientPostCode\"\n                  onChange={clientPostCodeChangeHandler}\n                  onBlur={clientPostCodeBlurHandler}\n                />\n                {clientPostCodeInputIsInvalid && errorText}\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientCountry\">Country</label>\n              <input\n                value={clientCountryInput}\n                type=\"text\"\n                id=\"clientCountry\"\n                onChange={clientCountryChangeHandler}\n                onBlur={clientCountryBlurHandler}\n              />\n              {clientCountryInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"invoiceDate\">Invoice Date</label>\n                <input\n                  value={invoiceDateInput}\n                  type=\"date\"\n                  id=\"invoiceDate\"\n                  onChange={invoiceDateChangeHandler}\n                  onBlur={invoiceDateBlurHandler}\n                />\n                {invoiceDateInputIsInvalid && errorText}\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"paymentTerm\">Payment Term</label>\n                <select value={termValue} onChange={getTermValue}>\n                  <option value=\"1\">Net 1 day</option>\n                  <option value=\"7\">Net 7 days</option>\n                  <option value=\"30\">Net 30 days</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"description\">Project Description</label>\n              <input\n                value={descriptionInput}\n                type=\"text\"\n                id=\"description\"\n                onChange={descriptionChangeHandler}\n                onBlur={descriptionBlurHandler}\n              />\n              {descriptionInputIsInvalid && errorText}\n            </div>\n\n            <h2>Item List</h2>\n\n            <div className=\"itemList\">\n              {component.map((item, i) => (\n                <Item\n                  key={i}\n                  id={i}\n                  onDelete={onDeleteHandler}\n                  onItemValue={getItemValue}\n                />\n              ))}\n            </div>\n\n            <button onClick={onAddItemHandler} className=\"btnAdd\">\n              + Add New item\n            </button>\n\n            <div className=\"btnBox\">\n              <button onClick={ondiscardHandler} className=\"btnDiscard\">\n                Discard\n              </button>\n\n              <div>\n                <button onClick={onSaveAsDraft} className=\"btnDraft\">\n                  Save as draft\n                </button>\n                <button onClick={onSaveAndSend} className=\"btnSend\">\n                  Save & Send\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </Fragment>\n  );\n}\n\nexport default NewForm;\n","import classes from \"./InvoicesPage.module.css\";\nimport Nav from \"../../components/Layout/Nav\";\nimport Layout from \"../../components/Layout/Layout\";\nimport InvoiceList from \"../../components/Invoices/InvoiceList\";\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport NewForm from \"../../components/Form/NewForm\";\n\nfunction InvoicesPage() {\n  const [filterValue, setFilterValue] = useState(\"\");\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const invoices = useSelector((state) => state.allInvoice.invoices);\n\n  const getFilterValueHandler = (value) => {\n    setFilterValue(value);\n  };\n\n  const filteredInvoices = invoices.filter((invoice) => {\n    if (filterValue === \"all\") {\n      return invoice;\n    } else {\n      return invoice.status.toLowerCase().includes(filterValue);\n    }\n  });\n\n  const openFormHandler = () => {\n    setModalOpen(true);\n  };\n\n  const closeFormHandler = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div className={classes.home}>\n      <div className={classes.navBar}>\n        <Nav />\n      </div>\n\n      <div>\n        <Layout\n          openForm={openFormHandler}\n          getFilterValue={getFilterValueHandler}\n        >\n          <InvoiceList invoices={filteredInvoices} />\n        </Layout>\n      </div>\n\n      <NewForm closeForm={closeFormHandler} show={modalOpen} />\n    </div>\n  );\n}\n\nexport default InvoicesPage;\n","import \"./InvoiceDetail.css\";\nimport { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { getDueDate } from \"../../utils/utils\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { invoiceActions } from \"../../store/index-redux\";\nimport { useNavigate } from \"react-router\";\n\nfunction InvoiceDetail(props) {\n  const params = useParams();\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const { invoiceId } = params;\n\n  const invoices = useSelector((state) => state.allInvoice.invoices);\n\n  const invoiceData = invoices.filter((invoice) => invoice.id === invoiceId);\n\n  const invoice = invoiceData[0];\n\n  const dueDate = getDueDate(invoice.invoiceDate, invoice.terms);\n\n  const amount = invoice.itemList.map((item) => item.price * item.qty);\n\n  if (amount.length <= 0) return;\n\n  const totalAmount = amount.reduce((a, b) => a + b);\n\n  const onDeleteHandler = () => {\n    dispatch(invoiceActions.deleteInvoice(invoice.id));\n    navigate(\"/invoices\", { replace: true });\n  };\n\n  const onMarkAsPaidHandler = () => {\n    dispatch(invoiceActions.markInvoiceAsPaid(invoice.id));\n  };\n\n  let color;\n\n  if (invoice.status === \"Paid\") {\n    color = \"green\";\n  } else if (invoice.status === \"Pending\") {\n    color = \"orange\";\n  } else {\n    color = \"grey\";\n  }\n\n  const isPaid = invoice.status === \"Paid\";\n\n  return (\n    <div className=\"container allDetails\">\n      <button onClick={props.onGoBack} className=\"backBtn\">\n        <img src={\"/static/images/icon-arrow-left.svg\"} alt=\"\" />\n        Go Back\n      </button>\n\n      <div className=\"btnDiv\">\n        <div className=\"statusDiv\">\n          <p>Status</p>\n\n          <div className={`status ${color}`}>\n            <span className=\"dot\"></span>\n            <span className=\"statusName\">{invoice.status}</span>\n          </div>\n        </div>\n\n        <div className=\"statusFunctions btnTop\">\n          {!isPaid && (\n            <button onClick={props.openForm} className=\"editInvoiceBtn\">\n              Edit\n            </button>\n          )}\n          <button onClick={onDeleteHandler} className=\"deleteBtn\">\n            Delete\n          </button>\n          {!isPaid && (\n            <button onClick={onMarkAsPaidHandler} className=\"markBtn\">\n              Mark as paid\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"details\">\n        <div className=\"clientInfo\">\n          <span>\n            <p>\n              <span>#</span>\n              {invoice.id}\n            </p>\n            <p>Landing Page Design</p>\n          </span>\n\n          <span className=\"clientShit\">\n            <p>{invoice.from.address}</p>\n            <p>{invoice.from.city}</p>\n            <p>{invoice.from.country}</p>\n            <p>{invoice.from.postCode}</p>\n          </span>\n        </div>\n\n        <div className=\"recieverInfo\">\n          <span>\n            <p>Invoice Date</p>\n            <p className=\"answer\">{invoice.invoiceDate}</p>\n          </span>\n          <span>\n            <p>Bill To</p>\n            <p className=\"answer\">{invoice.to.name}</p>\n          </span>\n          <span>\n            <p>Payment Due</p>\n            <p className=\"answer\">{dueDate}</p>\n          </span>\n          <span>\n            <p>{invoice.to.address}</p>\n            <p>{invoice.to.city}</p>\n            <p>{invoice.to.postCode}</p>\n            <p className=\"countryName\">{invoice.to.country}</p>\n          </span>\n          <span>\n            <p>Send To</p>\n            <p className=\"answer\">{invoice.to.mail}</p>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"checkout\">\n        {invoice.itemList.map((item) => (\n          <Fragment key={item.id}>\n            <div>\n              <span>\n                <p>{item.itemName}</p>\n                <p className=\"checkoutAmount\">\n                  <span>{item.qty}</span>\n                  <span>X</span>£{item.price}\n                </p>\n              </span>\n              <p>£{item.price * item.qty}</p>\n            </div>\n          </Fragment>\n        ))}\n\n        <div className=\"grandTotal\">\n          <p>Grand Total</p>\n          <p className=\"total\">£{totalAmount}</p>\n        </div>\n      </div>\n\n      <div className=\"checkout_desktop\">\n        {invoice.itemList.map((item) => (\n          <div key={item.id} className=\"priceInfo\">\n            <span>\n              <p>Item Name</p>\n              <p>{item.itemName}</p>\n            </span>\n            <span>\n              <p>QTY.</p>\n              <p>{item.qty}</p>\n            </span>\n            <span>\n              <p>Price</p>\n              <p>£{item.price}</p>\n            </span>\n            <span>\n              <p>Total</p>\n              <p>£{item.price * item.qty}</p>\n            </span>\n          </div>\n        ))}\n\n        <div className=\"grandTotal\">\n          <p>Amount Due</p>\n          <p className=\"total\">£{totalAmount}</p>\n        </div>\n      </div>\n\n      <div className=\"split\">\n        <div></div>\n        <div className=\"statusFunctions btnBottom\">\n          <button onClick={props.openForm} className=\"editInvoiceBtn\">\n            Edit\n          </button>\n          <button onClick={onDeleteHandler} className=\"deleteBtn\">\n            Delete\n          </button>\n          {!isPaid && (\n            <button onClick={onMarkAsPaidHandler} className=\"markBtn\">\n              Mark as paid\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InvoiceDetail;\n","import { useRef, useState } from \"react\";\nimport \"./Item.css\";\n\nfunction EditItem(props) {\n  const [btnClicked, setBtnClicked] = useState(false);\n\n  const total = props.price * props.qty;\n\n  const nameInputRef = useRef();\n\n  const qtyInputRef = useRef();\n\n  const priceInputRef = useRef();\n\n  const onSubmitHandler = () => {\n    if (\n      nameInputRef.current.value === \"\" &&\n      qtyInputRef.current.value === \"\" &&\n      priceInputRef.current.value === \"\"\n    ) {\n      return;\n    }\n\n    setBtnClicked(true);\n\n    const invoiceItem = {\n      itemName: nameInputRef.current.value,\n      qty: qtyInputRef.current.value,\n      price: priceInputRef.current.value,\n      total: total,\n      id: props.id,\n    };\n\n    props.onItemValue(invoiceItem);\n  };\n\n  return (\n    <div className=\"item\">\n      <div className=\"formInput\">\n        <label htmlFor=\"itemName\">Item Name</label>\n        <input\n          defaultValue={props.itemName}\n          type=\"text\"\n          id=\"itemName\"\n          ref={nameInputRef}\n        />\n      </div>\n\n      <div className=\"itemGrid\">\n        <div className=\"formInput\">\n          <label htmlFor=\"qty\">Qty.</label>\n          <input\n            defaultValue={props.qty}\n            type=\"number\"\n            id=\"qty\"\n            ref={qtyInputRef}\n          />\n        </div>\n\n        <div className=\"formInput\">\n          <label htmlFor=\"price\">Price</label>\n          <input\n            defaultValue={props.price}\n            type=\"number\"\n            id=\"price\"\n            ref={priceInputRef}\n          />\n        </div>\n\n        <div className=\"total\">\n          <span>Total</span>\n          <p>{total}</p>\n        </div>\n\n        <button className=\"removeItem\">\n          <img src={\"/static/images/icon-delete.svg\"} alt=\"\" />\n        </button>\n\n        <button\n          className=\"btnAddToList\"\n          onClick={onSubmitHandler}\n          disabled={btnClicked}\n        >\n          {!btnClicked && <img src=\"/static/images/icon-plus.svg\" alt=\"\" />}\n          {btnClicked && <img src=\"/static/images/icon-check.svg\" alt=\"\" />}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default EditItem;\n","import \"./NewForm.css\";\nimport Item from \"./Item\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport { invoiceActions } from \"../../store/index-redux\";\nimport EditItem from \"./EditItem\";\nimport { useState, Fragment } from \"react\";\nimport { formatEditDate } from \"../../utils/utils\";\n\nfunction EditForm(props) {\n  const params = useParams();\n\n  const dispatch = useDispatch();\n\n  const { invoiceId } = params;\n\n  const invoices = useSelector((state) => state.allInvoice.invoices);\n\n  const invoiceData = invoices.filter((invoice) => invoice.id === invoiceId);\n\n  const invoice = invoiceData[0];\n\n  //This is all the invoice item Function\n  const [invoiceItemList, setInvoiceItemList] = useState([]);\n\n  const [component, setComponent] = useState([\"sampleComponent\"]);\n\n  const onAddItemHandler = (e) => {\n    e.preventDefault();\n\n    setComponent((prev) => [...prev, \"sampleComponent\"]);\n  };\n\n  const onDeleteHandler = (id) => {\n    setComponent((prev) => prev.filter((item, i) => i !== id));\n  };\n\n  const getItemValue = (value) => {\n    setInvoiceItemList((prev) => [...prev, value]);\n  };\n\n  const getEditItemValue = (value) => {\n    setInvoiceItemList((prev) => [...prev, value]);\n  };\n\n  //This formats the date input\n  const date = formatEditDate(invoice.invoiceDate);\n\n  //The input Ref\n  const [addressInput, setAddressInput] = useState(invoice.from.address);\n\n  const onChangeAddressValue = (e) => {\n    setAddressInput(e.target.value);\n  };\n\n  const [cityInput, setCityInput] = useState(invoice.from.city);\n\n  const onChangeCityValue = (e) => {\n    setCityInput(e.target.value);\n  };\n\n  const [postcodeInput, setPostcodeInput] = useState(invoice.from.postCode);\n\n  const onChangePostCodeValue = (e) => {\n    setPostcodeInput(e.target.value);\n  };\n\n  const [countryInput, setCountryInput] = useState(invoice.from.country);\n\n  const onChangeCountryValue = (e) => {\n    setCountryInput(e.target.value);\n  };\n\n  const [clientNameInput, setClientNameInput] = useState(invoice.to.name);\n\n  const onChangeclientNameValue = (e) => {\n    setClientNameInput(e.target.value);\n  };\n\n  const [clientMailInput, setClientMailInput] = useState(invoice.to.mail);\n\n  const onChangeclientMailValue = (e) => {\n    setClientMailInput(e.target.value);\n  };\n\n  const [clientAddressInput, setClientAddressInput] = useState(\n    invoice.to.address\n  );\n\n  const onChangeclientAddressValue = (e) => {\n    setClientAddressInput(e.target.value);\n  };\n\n  const [clientCityInput, setClientCityInput] = useState(invoice.to.city);\n\n  const onChangeclientCityValue = (e) => {\n    setClientCityInput(e.target.value);\n  };\n\n  const [clientPostCodeInput, setClientPostCodeInput] = useState(\n    invoice.to.postCode\n  );\n\n  const onChangeclientPostCodeValue = (e) => {\n    setClientPostCodeInput(e.target.value);\n  };\n\n  const [clientCountryInput, setClientCountryInput] = useState(\n    invoice.to.country\n  );\n\n  const onChangeclientCountryValue = (e) => {\n    setClientCountryInput(e.target.value);\n  };\n\n  const [invoiceDateInput, setInvoiceDateInput] = useState(date);\n\n  const onChangeInvoiceDateValue = (e) => {\n    setInvoiceDateInput(e.target.value);\n  };\n\n  const [termValue, setTermValue] = useState(invoice.terms);\n\n  const getTermValue = (e) => {\n    if (e.target.value) {\n      setTermValue(e.target.value);\n    }\n  };\n\n  const [descriptionInput, setDescriptionInput] = useState(invoice.desc);\n\n  const onChangeDescriptionValue = (e) => {\n    setDescriptionInput(e.target.value);\n  };\n\n  const onSubmitHandler = () => {\n    if (\n      addressInput === \"\" &&\n      cityInput === \"\" &&\n      postcodeInput === \"\" &&\n      countryInput === \"\" &&\n      clientNameInput === \"\" &&\n      clientMailInput === \"\" &&\n      clientAddressInput === \"\" &&\n      clientCityInput === \"\" &&\n      clientPostCodeInput === \"\" &&\n      clientCountryInput === \"\" &&\n      invoiceDateInput === \"\" &&\n      descriptionInput === \"\" &&\n      termValue === \"\" &&\n      invoiceItemList.length <= 0\n    ) {\n      return;\n    }\n\n    const updatedInvoice = {\n      from: {\n        address: addressInput,\n        city: cityInput,\n        postCode: postcodeInput,\n        country: countryInput,\n      },\n      to: {\n        mail: clientMailInput,\n        name: clientNameInput,\n        address: clientAddressInput,\n        city: clientCityInput,\n        postCode: clientPostCodeInput,\n        country: clientCountryInput,\n      },\n      invoiceDate: invoiceDateInput,\n      terms: termValue,\n      desc: descriptionInput,\n      itemList: invoiceItemList,\n      status: invoice.status,\n      id: invoice.id,\n    };\n\n    dispatch(invoiceActions.updateInvoice(updatedInvoice));\n\n    props.closeForm();\n  };\n\n  const backdropClasses = [\n    \"backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClosed\",\n  ];\n\n  const modalClasses = [\"formModal\", props.show ? \"ModalOpen\" : \"ModalClosed\"];\n\n  return (\n    <Fragment>\n      {props.show && (\n        <div\n          onClick={props.closeForm}\n          className={backdropClasses.join(\" \")}\n        ></div>\n      )}\n\n      {props.show && (\n        <div className={modalClasses.join(\" \")}>\n          <button onClick={props.closeForm} className=\"backBtn\">\n            <img src={\"/static/images/icon-arrow-left.svg\"} alt=\"\" />\n            Go Back\n          </button>\n\n          <h2>Edit #{invoice.id}</h2>\n\n          <div className=\"form\">\n            <p>Bill Form</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"address\">Street Address</label>\n              <input\n                defaultValue={addressInput}\n                type=\"text\"\n                id=\"address\"\n                onChange={onChangeAddressValue}\n              />\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"city\">City</label>\n                <input\n                  defaultValue={cityInput}\n                  type=\"text\"\n                  id=\"city\"\n                  onChange={onChangeCityValue}\n                />\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"postCode\">Post Code</label>\n                <input\n                  defaultValue={postcodeInput}\n                  type=\"text\"\n                  id=\"postCode\"\n                  onChange={onChangePostCodeValue}\n                />\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"country\">Country</label>\n              <input\n                defaultValue={countryInput}\n                type=\"text\"\n                id=\"country\"\n                onChange={onChangeCountryValue}\n              />\n            </div>\n\n            <p>Bill To</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientName\">Client's Name</label>\n              <input\n                defaultValue={clientNameInput}\n                type=\"text\"\n                id=\"clientName\"\n                onChange={onChangeclientNameValue}\n              />\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientEmail\">Client's Email</label>\n              <input\n                defaultValue={clientMailInput}\n                type=\"email\"\n                id=\"clientEmail\"\n                onChange={onChangeclientMailValue}\n              />\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientAddress\">Street Address</label>\n              <input\n                defaultValue={clientAddressInput}\n                type=\"text\"\n                id=\"clientAddress\"\n                onChange={onChangeclientAddressValue}\n              />\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"clientCity\">City</label>\n                <input\n                  defaultValue={clientCityInput}\n                  type=\"text\"\n                  id=\"clientCity\"\n                  onChange={onChangeclientCityValue}\n                />\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"clientPostCode\">Post Code</label>\n                <input\n                  defaultValue={clientPostCodeInput}\n                  type=\"text\"\n                  id=\"clientPostCode\"\n                  onChange={onChangeclientPostCodeValue}\n                />\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientCountry\">Country</label>\n              <input\n                defaultValue={clientCountryInput}\n                type=\"text\"\n                id=\"clientCountry\"\n                onChange={onChangeclientCountryValue}\n              />\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"invoiceDate\">Invoice Date</label>\n                <input\n                  type=\"date\"\n                  id=\"invoiceDate\"\n                  defaultValue={invoiceDateInput}\n                  onChange={onChangeInvoiceDateValue}\n                />\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"paymentTerm\">Payment Term</label>\n                <select onClick={getTermValue} defaultValue={termValue}>\n                  <option value=\"1\">Net 1 day</option>\n                  <option value=\"7\">Net 7 days</option>\n                  <option value=\"30\">Net 30 days</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"description\">Project Description</label>\n              <input\n                defaultValue={descriptionInput}\n                type=\"text\"\n                id=\"description\"\n                onChange={onChangeDescriptionValue}\n              />\n            </div>\n\n            <h2>Item List</h2>\n\n            <div className=\"itemList\">\n              {invoice.itemList.map((item, i) => (\n                <EditItem\n                  key={i}\n                  itemName={item.itemName}\n                  qty={item.qty}\n                  price={item.price}\n                  onItemValue={getEditItemValue}\n                />\n              ))}\n\n              {component.map((item, i) => (\n                <Item\n                  key={i}\n                  id={i}\n                  onDelete={onDeleteHandler}\n                  onItemValue={getItemValue}\n                />\n              ))}\n            </div>\n\n            <button onClick={onAddItemHandler} className=\"btnAdd\">\n              + Add New item\n            </button>\n\n            <div className=\"btnBox\">\n              <div></div>\n\n              <div>\n                <button onClick={props.closeForm} className=\"btnCancel\">\n                  Cancel\n                </button>\n                <button\n                  disabled={invoiceItemList.length <= 0}\n                  onClick={onSubmitHandler}\n                  className=\"btnSaveChanges\"\n                >\n                  Save Changes\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </Fragment>\n  );\n}\n\nexport default EditForm;\n","import InvoiceDetail from \"../../components/InvoiceDetail/InvoiceDetail\";\nimport Nav from \"../../components/Layout/Nav\";\nimport classes from \"./Invoice.module.css\";\nimport { useNavigate } from \"react-router\";\nimport EditForm from \"../../components/Form/EditForm\";\nimport { useState } from \"react\";\n\nfunction InvoicePage() {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const navigate = useNavigate();\n\n  const onGoBackHandler = () => {\n    navigate(\"/invoices\", { replace: true });\n  };\n\n  const openFormHandler = () => {\n    setModalOpen(true);\n  };\n\n  const closeFormHandler = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div className={classes.invoice}>\n      <div className={classes.navBar}>\n        <Nav />\n      </div>\n\n      <InvoiceDetail onGoBack={onGoBackHandler} openForm={openFormHandler} />\n\n      <EditForm closeForm={closeFormHandler} show={modalOpen} />\n    </div>\n  );\n}\n\nexport default InvoicePage;\n","import AuthPage from \"./pages/AuthPage/AuthPage\";\nimport HomePage from \"./pages/HomePage/HomePage\";\nimport InvoicesPage from \"./pages/Invoices/InvoicesPage\";\nimport InvoicePage from \"./pages/invoice/InvoicePage\";\nimport { Routes, Route, Navigate } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchInvoiceData, sendInvoiceData } from \"./store/invoice-actions\";\nimport { useContext, useEffect } from \"react\";\nimport AuthContext from \"./store/auth-context\";\n\nlet isInitial = true;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const invoices = useSelector((state) => state.allInvoice);\n\n  const authCtx = useContext(AuthContext);\n\n  useEffect(() => {\n    dispatch(\n      fetchInvoiceData(\n        `https://invoices-49204-default-rtdb.firebaseio.com/${authCtx.localId}.json`\n      )\n    );\n  }, [dispatch, authCtx.localId]);\n\n  useEffect(() => {\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n\n    if (invoices.changed) {\n      dispatch(\n        sendInvoiceData(\n          invoices,\n          `https://invoices-49204-default-rtdb.firebaseio.com/${authCtx.localId}.json`\n        )\n      );\n    }\n  }, [dispatch, invoices, authCtx.localId]);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n\n      {!authCtx.isLoggedIn && <Route path=\"/auth\" element={<AuthPage />} />}\n\n      <Route\n        path=\"/invoices\"\n        element={authCtx.isLoggedIn ? <InvoicesPage /> : <Navigate to=\"/\" />}\n      />\n\n      <Route\n        path=\"/invoices/:invoiceId\"\n        element={authCtx.isLoggedIn ? <InvoicePage /> : <Navigate to=\"/\" />}\n      />\n    </Routes>\n  );\n}\n\nexport default App;\n","import { invoiceActions } from \"./index-redux\";\n\nexport const fetchInvoiceData = (page) => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const res = await fetch(page);\n\n      if (!res.ok) throw new Error(\"Something went wrong...\");\n\n      const data = await res.json();\n\n      console.log(data);\n\n      const result = [];\n\n      for (const key in data) {\n        result.push(data[key].invoices);\n      }\n\n      const invoices = result[0].map((invoice) => invoice);\n\n      console.log(invoices);\n\n      return invoices;\n    };\n\n    try {\n      const invoiceData = await fetchData();\n\n      dispatch(\n        invoiceActions.replaceInvoices({\n          invoices: invoiceData.length > 0 ? invoiceData : [],\n          totalInvoices: invoiceData.length,\n        })\n      );\n    } catch (err) {\n      console.log(\"Could not get invoice\");\n      console.error(err);\n    }\n  };\n};\n\nexport const sendInvoiceData = (invoices, page) => {\n  return async () => {\n    const sendRequest = async () => {\n      const res = await fetch(page, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          invoices: invoices,\n          totalInvoices: invoices.length,\n        }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Something went wrong...\");\n      }\n    };\n\n    try {\n      await sendRequest();\n    } catch (err) {\n      console.log(\"Could not send invoice\");\n      console.log(err);\n    }\n  };\n};\n","import ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index-redux\";\nimport { AuthContextProvider } from \"./store/auth-context\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <AuthContextProvider>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </AuthContextProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}