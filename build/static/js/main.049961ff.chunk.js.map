{"version":3,"sources":["components/Auth/AuthForm.module.css","components/Layout/Nav.module.css","pages/Invoices/InvoicesPage.module.css","pages/invoice/Invoice.module.css","store/invoice-slice.js","store/index-redux.js","utils/utils.js","store/auth-context.js","hooks/use-input.js","components/Auth/AuthForm.js","pages/AuthPage/AuthPage.js","components/Layout/Nav.js","components/Invoices/EmptyInvoices.js","pages/HomePage/HomePage.js","components/Layout/Filters.js","components/Layout/Layout.js","components/Invoices/InvoiceItem.js","components/Invoices/InvoiceList.js","components/Form/Item.js","components/Form/NewForm.js","pages/Invoices/InvoicesPage.js","components/InvoiceDetail/InvoiceDetail.js","components/Form/EditItem.js","components/Form/EditForm.js","pages/invoice/InvoicePage.js","App.js","store/invoice-actions.js","index.js"],"names":["module","exports","invoiceSlice","createSlice","name","initialState","invoices","totalInvoices","changed","reducers","replaceInvoices","state","action","payload","addInvoice","newInvoice","find","invoice","id","push","deleteInvoice","filter","markInvoiceAsPaid","existingInvoice","findIndex","status","updateInvoice","updatedInvoice","store","configureStore","reducer","allInvoice","invoiceActions","actions","getDueDate","date","terms","dueDate","formatter","Intl","DateTimeFormat","navigator","language","month","year","day","dateObj","Date","format","formatDate","getTime","logoutTimer","calcExpiringTime","time","currentTime","AuthContext","createContext","token","localId","isLoggedIn","login","logout","AuthContextProvider","props","initialToken","initialId","tokenData","storedToken","localStorage","getItem","storedExpiringTime","storedLocalId","remainingTime","removeItem","duration","retrieveStoredToken","useState","setToken","setLocalId","userIsLoggedIn","logoutHandler","useCallback","clearTimeout","window","onbeforeunload","useEffect","setTimeout","contextValue","expiringTime","setItem","autoLogoutTime","Provider","value","children","useInput","validate","enteredInput","setEnteredInput","isTouched","setIsTouched","inputIsValid","isValid","isInvalid","onChangeHandler","e","target","onBlurHandler","reset","AuthForm","authCtx","useContext","navigate","useNavigate","isLogin","setIsLogin","setIsLoading","includes","emailInput","enteredEmailIsValid","emailInputIsInvalid","emailChangeHandler","emailBlurHandler","resetEmailInput","length","passwordInput","enteredPasswordIsValid","passwordInputIsInvalid","passwordChangeHandler","passwordBlurHandler","resetPasswordInput","className","classes","formModal","onSubmit","url","preventDefault","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","Error","json","data","expirationTime","expiresIn","idToken","toISOString","replace","catch","err","console","log","message","form","formInput","htmlFor","style","border","type","onChange","onBlur","btnAction","btnToggle","onClick","prevState","AuthPage","Nav","nav","navLogo","src","alt","imgDiv","avatar","EmptyInvoices","header","text","HomePage","Filters","filterIsOpen","setFilterIsOpen","prev","dataset","onFilterValue","Layout","noOfInvoices","useSelector","getFilterValue","openForm","InvoiceItem","color","openDetail","toName","totalAmount","InvoiceList","map","amount","itemList","item","price","qty","reduce","a","b","invoiceDate","to","Item","btnClicked","setBtnClicked","errorText","trim","itemNameInput","entereditemNameIsValid","itemNameInputIsInvalid","itemNameChangeHandler","itemNameBlurHandler","resetitemNameInput","qtyInput","enteredqtyIsValid","qtyInputIsInvalid","qtyChangeHandler","qtyBlurHandler","resetqtyInput","priceInput","enteredpriceIsValid","priceInputIsInvalid","priceChangeHandler","priceBlurHandler","resetpriceInput","total","onSubmitHandler","invoiceItem","itemName","onItemValue","min","max","onDelete","disabled","NewForm","dispatch","useDispatch","randomId","Math","floor","random","component","setComponent","invoiceItemList","setInvoiceItemList","termValue","setTermValue","onDeleteHandler","i","getItemValue","addressInput","enteredAddressIsValid","addressInputIsInvalid","addressChangeHandler","addressBlurHandler","resetAddressInput","cityInput","enteredCityIsValid","cityInputIsInvalid","cityChangeHandler","cityBlurHandler","resetCityInput","postCodeInput","enteredpostCodeIsValid","postCodeInputIsInvalid","postCodeChangeHandler","postCodeBlurHandler","resetpostCodeInput","countryInput","enteredcountryIsValid","countryInputIsInvalid","countryChangeHandler","countryBlurHandler","resetcountryInput","clientNameInput","enteredclientNameIsValid","clientNameInputIsInvalid","clientNameChangeHandler","clientNameBlurHandler","resetclientNameInput","clientEmailInput","enteredclientEmailIsValid","clientEmailInputIsInvalid","clientEmailChangeHandler","clientEmailBlurHandler","resetclientEmailInput","clientAddressInput","enteredclientAddressIsValid","clientAddressInputIsInvalid","clientAddressChangeHandler","clientAddressBlurHandler","resetclientAddressInput","clientCityInput","enteredclientCityIsValid","clientCityInputIsInvalid","clientCityChangeHandler","clientCityBlurHandler","resetclientCityInput","clientPostCodeInput","enteredclientPostCodeIsValid","clientPostCodeInputIsInvalid","clientPostCodeChangeHandler","clientPostCodeBlurHandler","resetclientPostCodeInput","clientCountryInput","enteredclientCountryIsValid","clientCountryInputIsInvalid","clientCountryChangeHandler","clientCountryBlurHandler","resetclientCountryInput","invoiceDateInput","enteredinvoiceDateIsValid","invoiceDateInputIsInvalid","invoiceDateChangeHandler","invoiceDateBlurHandler","resetinvoiceDateInput","descriptionInput","entereddescriptionIsValid","descriptionInputIsInvalid","descriptionChangeHandler","descriptionBlurHandler","resetdescriptionInput","resetForm","closeForm","backdropClasses","show","modalClasses","join","from","address","city","postCode","country","mail","desc","toString","InvoicesPage","filterValue","setFilterValue","modalOpen","setModalOpen","filteredInvoices","toLowerCase","home","navBar","InvoiceDetail","params","useParams","invoiceId","invoiceData","onMarkAsPaidHandler","isPaid","onGoBack","EditItem","nameInputRef","useRef","qtyInputRef","priceInputRef","defaultValue","ref","current","EditForm","getEditItemValue","d","dd","mm","yyyy","formatEditDate","setAddressInput","setCityInput","postcodeInput","setPostcodeInput","setCountryInput","setClientNameInput","clientMailInput","setClientMailInput","setClientAddressInput","setClientCityInput","setClientPostCodeInput","setClientCountryInput","setInvoiceDateInput","setDescriptionInput","InvoicePage","onload","location","isInitial","App","page","fetchData","key","result","error","sendRequest","sendInvoiceData","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.049961ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formModal\":\"AuthForm_formModal__78CxL\",\"form\":\"AuthForm_form__3ZLEX\",\"formInput\":\"AuthForm_formInput__3aDfe\",\"actions\":\"AuthForm_actions__1VNhY\",\"btnAction\":\"AuthForm_btnAction__2hrA7\",\"btnToggle\":\"AuthForm_btnToggle__2aCAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__WI6aX\",\"navLogo\":\"Nav_navLogo__wosKO\",\"imgDiv\":\"Nav_imgDiv__3eSF8\",\"avatar\":\"Nav_avatar__1VOSE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"InvoicesPage_home__2Eh64\",\"navBar\":\"InvoicesPage_navBar__32wDS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"invoice\":\"Invoice_invoice__2yATv\",\"navBar\":\"Invoice_navBar__1BTN9\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst invoiceSlice = createSlice({\n  name: \"invoices\",\n  initialState: {\n    invoices: [],\n    totalInvoices: 0,\n    changed: false,\n  },\n  reducers: {\n    replaceInvoices(state, action) {\n      state.invoices = action.payload.invoices;\n      state.totalInvoices = action.payload.totalInvoices;\n    },\n\n    addInvoice(state, action) {\n      const newInvoice = action.payload;\n\n      const existingInvoice = state.invoices.find(\n        (invoice) => invoice.id === newInvoice.id\n      );\n\n      if (!existingInvoice) {\n        state.invoices.push(newInvoice);\n        state.totalInvoices++;\n      }\n\n      state.changed = true;\n    },\n\n    deleteInvoice(state, action) {\n      const id = action.payload;\n\n      const existingInvoice = state.invoices.find(\n        (invoice) => invoice.id === id\n      );\n\n      if (existingInvoice) {\n        state.invoices = state.invoices.filter((invoice) => invoice.id !== id);\n        state.totalInvoices--;\n      }\n\n      state.changed = true;\n    },\n\n    markInvoiceAsPaid(state, action) {\n      const id = action.payload;\n\n      const existingInvoice = state.invoices.findIndex(\n        (invoice) => invoice.id === id\n      );\n\n      if (state.invoices[existingInvoice]) {\n        state.invoices[existingInvoice].status = \"Paid\";\n      }\n\n      state.changed = true;\n    },\n\n    updateInvoice(state, action) {\n      const updatedInvoice = action.payload;\n\n      const existingInvoice = state.invoices.findIndex(\n        (invoice) => invoice.id === updatedInvoice.id\n      );\n\n      if (state.invoices[existingInvoice]) {\n        state.invoices[existingInvoice] = updatedInvoice;\n      }\n\n      state.changed = true;\n    },\n  },\n});\n\nexport default invoiceSlice;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport invoiceSlice from \"./invoice-slice\";\n\nconst store = configureStore({\n  reducer: { allInvoice: invoiceSlice.reducer },\n});\n\nexport const invoiceActions = invoiceSlice.actions;\n\nexport default store;\n","export function formatDate(date) {\n  const formatter = new Intl.DateTimeFormat(navigator.language || \"eu\", {\n    month: \"short\",\n    year: \"numeric\",\n    day: \"2-digit\",\n  });\n\n  const dateObj = new Date(date);\n  return formatter.format(dateObj);\n}\n\nexport function formatEditDate(date) {\n  const d = new Date(date);\n  const dd = new Intl.DateTimeFormat(\"en\", { day: \"2-digit\" }).format(d);\n  const mm = new Intl.DateTimeFormat(\"en\", { month: \"2-digit\" }).format(d);\n  const yyyy = new Intl.DateTimeFormat(\"en\", { year: \"numeric\" }).format(d);\n  const newDate = `${yyyy}-${mm}-${dd}`;\n\n  return newDate;\n}\n\nexport function getDueDate(date, terms) {\n  const futureTime = terms * 24 * 60 * 60 * 1000;\n\n  const dateTime = new Date(date).getTime();\n\n  const newDate = futureTime + dateTime;\n\n  const dueDate = formatDate(newDate);\n\n  return dueDate;\n}\n\nexport const calcExpiringTime = (time) => {\n  const currentTime = new Date().getTime();\n\n  const expiringTime = new Date(time).getTime();\n\n  const remainingTime = expiringTime - currentTime;\n\n  return remainingTime;\n};\n\nexport const retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n\n  const storedExpiringTime = localStorage.getItem(\"expiringTime\");\n\n  const storedLocalId = localStorage.getItem(\"localID\");\n\n  const remainingTime = calcExpiringTime(storedExpiringTime);\n\n  if (remainingTime <= 3600) {\n    localStorage.removeItem(\"token\");\n\n    localStorage.removeItem(\"localID\");\n\n    localStorage.removeItem(\"expiringTime\");\n\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    localId: storedLocalId,\n    duration: remainingTime,\n  };\n};\n","import { createContext, useCallback, useEffect, useState } from \"react\";\nimport { calcExpiringTime } from \"../utils/utils\";\nimport { retrieveStoredToken } from \"../utils/utils\";\n\nlet logoutTimer;\n\nconst AuthContext = createContext({\n  token: \"\",\n  localId: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nexport const AuthContextProvider = (props) => {\n  const tokenData = retrieveStoredToken();\n\n  let initialToken, initialId;\n\n  if (tokenData) {\n    initialToken = tokenData.token;\n\n    initialId = tokenData.localId;\n  }\n\n  const [token, setToken] = useState(initialToken);\n\n  const [localId, setLocalId] = useState(initialId);\n\n  const userIsLoggedIn = !!token && !!localId;\n\n  const logoutHandler = useCallback(() => {\n    setToken(null);\n\n    setLocalId(null);\n\n    localStorage.removeItem(\"token\");\n\n    localStorage.removeItem(\"localID\");\n\n    localStorage.removeItem(\"expiringTime\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  }, []);\n\n  const loginHandler = (token, localId, expiringTime) => {\n    setToken(token);\n\n    setLocalId(localId);\n\n    localStorage.setItem(\"token\", token);\n\n    localStorage.setItem(\"localID\", localId);\n\n    localStorage.setItem(\"expiringTime\", expiringTime);\n\n    const autoLogoutTime = calcExpiringTime(expiringTime);\n\n    logoutTimer = setTimeout(logoutHandler, autoLogoutTime);\n  };\n\n  window.onbeforeunload = () => {\n    logoutHandler();\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData, logoutHandler]);\n\n  const contextValue = {\n    token: token,\n    localId: localId,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n","import { useState } from \"react\";\n\nfunction useInput(validate) {\n  const [enteredInput, setEnteredInput] = useState(\"\");\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const inputIsValid = validate(enteredInput);\n\n  const InputIsInvalid = !inputIsValid && isTouched;\n\n  const onChangeHandler = (e) => {\n    setEnteredInput(e.target.value);\n  };\n\n  const onBlurHandler = (e) => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredInput(\"\");\n\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredInput,\n    isValid: inputIsValid,\n    isInvalid: InputIsInvalid,\n    onChangeHandler: onChangeHandler,\n    onBlurHandler: onBlurHandler,\n    reset: reset,\n  };\n}\n\nexport default useInput;\n","import classes from \"./AuthForm.module.css\";\nimport { useContext, useState } from \"react\";\nimport useInput from \"../../hooks/use-input\";\nimport { useNavigate } from \"react-router\";\nimport AuthContext from \"../../store/auth-context\";\n\nfunction AuthForm() {\n  const authCtx = useContext(AuthContext);\n\n  const navigate = useNavigate();\n\n  const [isLogin, setIsLogin] = useState(true);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const {\n    value: emailInput,\n    isValid: enteredEmailIsValid,\n    isInvalid: emailInputIsInvalid,\n    onChangeHandler: emailChangeHandler,\n    onBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput(\n    (value) => value.includes(\"@gmail.com\") || value.includes(\"@yahoo.com\")\n  );\n\n  const {\n    value: passwordInput,\n    isValid: enteredPasswordIsValid,\n    isInvalid: passwordInputIsInvalid,\n    onChangeHandler: passwordChangeHandler,\n    onBlurHandler: passwordBlurHandler,\n    reset: resetPasswordInput,\n  } = useInput((value) => value.length > 5);\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (!enteredPasswordIsValid && !enteredEmailIsValid) return;\n\n    setIsLoading(true);\n\n    let url;\n\n    if (isLogin) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBJS92owOW5SpmqXUS3gSDlkI-VHk8H0qM\";\n    } else {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBJS92owOW5SpmqXUS3gSDlkI-VHk8H0qM\";\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: emailInput,\n        password: passwordInput,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Could not send request\");\n        }\n\n        return res.json();\n      })\n      .then((data) => {\n        const expirationTime = new Date(\n          new Date().getTime() + +data.expiresIn * 1000\n        );\n\n        authCtx.login(data.idToken, data.localId, expirationTime.toISOString());\n\n        navigate(\"/invoices\", { replace: true });\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n\n    resetEmailInput();\n\n    resetPasswordInput();\n  };\n\n  return (\n    <div className={classes.formModal}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={onSubmitHandler} className={classes.form}>\n        <div className={classes.formInput}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            style={{ border: emailInputIsInvalid ? \"red\" : \"none\" }}\n            value={emailInput}\n            type=\"email\"\n            id=\"email\"\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n          />\n        </div>\n\n        <div className={classes.formInput}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            style={{ border: passwordInputIsInvalid ? \"red\" : \"none\" }}\n            value={passwordInput}\n            type=\"password\"\n            id=\"password\"\n            onChange={passwordChangeHandler}\n            onBlur={passwordBlurHandler}\n          />\n        </div>\n\n        <div className={classes.actions}>\n          <button className={classes.btnAction}>\n            {isLogin ? \"Login\" : \"Sign Up \"}\n          </button>\n\n          <button\n            className={classes.btnToggle}\n            onClick={switchAuthModeHandler}\n            type=\"button\"\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default AuthForm;\n","import AuthForm from \"../../components/Auth/AuthForm\";\n\nfunction AuthPage() {\n  return <AuthForm />;\n}\n\nexport default AuthPage;\n","import classes from \"./Nav.module.css\";\nimport { useNavigate } from \"react-router\";\n\nfunction Nav() {\n  const navigate = useNavigate();\n\n  const onClickHandler = () => {\n    navigate(\"/auth\", { push: true });\n  };\n\n  return (\n    <nav className={classes.nav}>\n      <img className={classes.navLogo} src={\"/static/images/logo.svg\"} alt=\"\" />\n\n      <div className={classes.imgDiv}>\n        <img src={\"/static/images/icon-sun.svg\"} alt=\"\" />\n        <div onClick={onClickHandler} className={classes.avatar}>\n          <img src={\"/static/images/image-avatar.jpg\"} alt=\"\" />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import \"./EmptyInvoices.css\";\n\nfunction EmptyInvoices(props) {\n  return (\n    <div className=\"emptyList\">\n      <img src={\"/static/images/illustration-empty.svg\"} alt=\"\" />\n\n      <span>\n        <h1>{props.header}</h1>\n        <p>{props.text}</p>\n      </span>\n    </div>\n  );\n}\n\nexport default EmptyInvoices;\n","import Nav from \"../../components/Layout/Nav\";\nimport EmptyInvoices from \"../../components/Invoices/EmptyInvoices\";\n\nfunction HomePage() {\n  return (\n    <div>\n      <div>\n        <Nav />\n      </div>\n\n      <EmptyInvoices\n        header={\"Click the avatar icon\"}\n        text={\"Login or create an accout to add invoices\"}\n      />\n    </div>\n  );\n}\n\nexport default HomePage;\n","import { useState } from \"react\";\nimport \"./Filters.css\";\n\nfunction Filters(props) {\n  const [filterIsOpen, setFilterIsOpen] = useState(false);\n\n  const toggleFilter = () => {\n    setFilterIsOpen((prev) => !prev);\n  };\n\n  const onFiltersClickhandler = (e) => {\n    if (e.target.dataset.value) {\n      props.onFilterValue(e.target.dataset.value);\n    }\n  };\n\n  return (\n    <div className=\"filters\">\n      <div onClick={toggleFilter} className=\"filterTop\">\n        <span>Filter</span>\n        <img\n          className={filterIsOpen ? \"rotate\" : \"\"}\n          src={\"/static/images/icon-arrow-down.svg\"}\n          alt=\"\"\n        />\n      </div>\n\n      {filterIsOpen && (\n        <div onClick={onFiltersClickhandler} className=\"filterList\">\n          <p data-value=\"all\">All</p>\n          <p data-value=\"paid\">Paid</p>\n          <p data-value=\"pending\">Pending</p>\n          <p data-value=\"draft\">Draft</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Filters;\n","import Filters from \"./Filters\";\nimport \"./Layout.css\";\nimport { useSelector } from \"react-redux\";\nimport AuthContext from \"../../store/auth-context\";\nimport { useContext } from \"react\";\n\nfunction Layout(props) {\n  const authCtx = useContext(AuthContext);\n\n  const noOfInvoices = useSelector((state) => state.allInvoice.totalInvoices);\n\n  const getFilterValue = (value) => {\n    props.getFilterValue(value);\n  };\n\n  const onLogoutHandler = () => {\n    authCtx.logout();\n  };\n\n  return (\n    <div className=\"container layout \">\n      <header className=\"header\">\n        <div className=\"invo\">\n          <span>Invoices</span>\n          <span className=\"amount\">{noOfInvoices} invoices</span>\n        </div>\n\n        <div className=\"options\">\n          <Filters onFilterValue={getFilterValue} />\n\n          <button onClick={props.openForm}>\n            <span>\n              <img src={\"/static/images/icon-plus.svg\"} alt=\"\" />\n            </span>\n            New\n          </button>\n\n          <button onClick={onLogoutHandler}>Logout</button>\n        </div>\n      </header>\n\n      <main>{props.children}</main>\n    </div>\n  );\n}\n\nexport default Layout;\n","import \"./InvoiceItem.css\";\nimport { useNavigate } from \"react-router\";\n\nfunction InvoiceItem(props) {\n  let color;\n\n  if (props.status === \"Paid\") {\n    color = \"green\";\n  } else if (props.status === \"Pending\") {\n    color = \"orange\";\n  } else {\n    color = \"grey\";\n  }\n\n  const navigate = useNavigate();\n\n  const openDetail = () => {\n    navigate(`/invoices/${props.id}`);\n  };\n\n  return (\n    <div onClick={openDetail} className=\"invoice\">\n      <p className=\"invoiceId\">\n        <span>#</span>\n        {props.id}\n      </p>\n\n      <p className=\"name\">{props.toName}</p>\n\n      <div className=\"invoiceInfo\">\n        <p className=\"date\">\n          <span>Due</span> {props.dueDate}\n        </p>\n        <p className=\"amount\">{props.totalAmount}</p>\n      </div>\n\n      <div className=\"invoiceStatus\">\n        <div className={`status ${color}`}>\n          <span className=\"dot\"></span>\n          <span className=\"statusName\">{props.status}</span>\n        </div>\n\n        <img\n          onClick={openDetail}\n          src={\"/static/images/icon-arrow-right.svg\"}\n          alt=\"\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default InvoiceItem;\n","import \"./InvoiceList.css\";\nimport InvoiceItem from \"./InvoiceItem\";\nimport { getDueDate } from \"../../utils/utils\";\nimport EmptyInvoices from \"./EmptyInvoices\";\n\nfunction InvoiceList(props) {\n  if (props.invoices.length === 0) {\n    return (\n      <EmptyInvoices\n        header={\"There is nothing here\"}\n        text={\"Create on invoice by clicking the New button and get started\"}\n      />\n    );\n  }\n\n  return (\n    <div className=\" list\">\n      {props.invoices.map((invoice) => {\n        const amount = invoice.itemList.map((item) => item.price * item.qty);\n\n        if (amount.length <= 0) {\n          return;\n        }\n\n        const totalAmount = amount.reduce((a, b) => a + b);\n\n        const dueDate = getDueDate(invoice.invoiceDate, invoice.terms);\n\n        return (\n          <InvoiceItem\n            key={invoice.id}\n            id={invoice.id}\n            toName={invoice.to.name}\n            dueDate={dueDate}\n            totalAmount={`£${totalAmount}`}\n            status={invoice.status}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default InvoiceList;\n","import \"./Item.css\";\nimport useInput from \"../../hooks/use-input\";\nimport { useState } from \"react\";\n\nfunction Item(props) {\n  const [btnClicked, setBtnClicked] = useState(false);\n\n  const errorText = <p className=\"errorText\">Input must not be empty</p>;\n\n  const onClickHandler = (e) => {\n    e.preventDefault();\n\n    props.onDelete(props.id);\n  };\n\n  const {\n    value: itemNameInput,\n    isValid: entereditemNameIsValid,\n    isInvalid: itemNameInputIsInvalid,\n    onChangeHandler: itemNameChangeHandler,\n    onBlurHandler: itemNameBlurHandler,\n    reset: resetitemNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: qtyInput,\n    isValid: enteredqtyIsValid,\n    isInvalid: qtyInputIsInvalid,\n    onChangeHandler: qtyChangeHandler,\n    onBlurHandler: qtyBlurHandler,\n    reset: resetqtyInput,\n  } = useInput((value) => value > 0);\n\n  const {\n    value: priceInput,\n    isValid: enteredpriceIsValid,\n    isInvalid: priceInputIsInvalid,\n    onChangeHandler: priceChangeHandler,\n    onBlurHandler: priceBlurHandler,\n    reset: resetpriceInput,\n  } = useInput((value) => value > 0);\n\n  const total = qtyInput * priceInput;\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (!entereditemNameIsValid && !enteredqtyIsValid && !enteredpriceIsValid) {\n      return;\n    }\n\n    setBtnClicked(true);\n\n    const invoiceItem = {\n      itemName: itemNameInput,\n      qty: qtyInput,\n      price: priceInput,\n      total: total,\n      id: props.id,\n    };\n\n    props.onItemValue(invoiceItem, e);\n\n    resetitemNameInput();\n    resetqtyInput();\n    resetpriceInput();\n  };\n\n  return (\n    <form onSubmit={onSubmitHandler} className=\"item\">\n      <div className=\"formInput\">\n        <label htmlFor=\"itemName\">Item Name</label>\n        <input\n          value={itemNameInput}\n          type=\"text\"\n          id=\"itemName\"\n          onChange={itemNameChangeHandler}\n          onBlur={itemNameBlurHandler}\n        />\n        {itemNameInputIsInvalid && errorText}\n      </div>\n\n      <div className=\"itemGrid\">\n        <div className=\"formInput\">\n          <label htmlFor=\"qty\">Qty.</label>\n          <input\n            value={qtyInput}\n            type=\"number\"\n            id=\"qty\"\n            min=\"1\"\n            max=\"10\"\n            onChange={qtyChangeHandler}\n            onBlur={qtyBlurHandler}\n          />\n          {qtyInputIsInvalid && errorText}\n        </div>\n\n        <div className=\"formInput\">\n          <label htmlFor=\"price\">Price</label>\n          <input\n            value={priceInput}\n            type=\"number\"\n            min=\"1\"\n            max=\"10\"\n            id=\"price\"\n            onChange={priceChangeHandler}\n            onBlur={priceBlurHandler}\n          />\n          {priceInputIsInvalid && errorText}\n        </div>\n\n        <div className=\"total\">\n          <span>Total</span>\n          <p>{total}</p>\n        </div>\n\n        <button className=\"removeItem\">\n          <img\n            onClick={onClickHandler}\n            src={\"/static/images/icon-delete.svg\"}\n            alt=\"\"\n          />\n        </button>\n\n        <button\n          className=\"btnAddToList\"\n          onClick={onSubmitHandler}\n          disabled={btnClicked}\n        >\n          {!btnClicked && <img src=\"/static/images/icon-plus.svg\" alt=\"\" />}\n          {btnClicked && <img src=\"/static/images/icon-check.svg\" alt=\"\" />}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Item;\n","import { Fragment, useState } from \"react\";\nimport \"./NewForm.css\";\nimport Item from \"./Item\";\nimport useInput from \"../../hooks/use-input\";\nimport { useDispatch } from \"react-redux\";\nimport { invoiceActions } from \"../../store/index-redux\";\n\nfunction NewForm(props) {\n  const dispatch = useDispatch();\n\n  const randomId = Math.floor(100000 + Math.random() * 900000);\n\n  const [component, setComponent] = useState([\"sampleComponent\"]);\n\n  const [invoiceItemList, setInvoiceItemList] = useState([]);\n\n  //To Get the term value from select Input\n  const [termValue, setTermValue] = useState();\n\n  const getTermValue = (e) => {\n    if (e.target.value) {\n      setTermValue(e.target.value);\n    }\n  };\n\n  //Adding, Removing and getting the Invoice items\n  const onAddItemHandler = (e) => {\n    e.preventDefault();\n\n    setComponent((prev) => [...prev, \"sampleComponent\"]);\n  };\n\n  const onDeleteHandler = (id) => {\n    setComponent((prev) => prev.filter((item, i) => i !== id));\n  };\n\n  const getItemValue = (value) => {\n    setInvoiceItemList((prev) => [...prev, value]);\n  };\n\n  //Input Validation\n  const errorText = <p className=\"errorText\">Input must not be empty</p>;\n\n  const {\n    value: addressInput,\n    isValid: enteredAddressIsValid,\n    isInvalid: addressInputIsInvalid,\n    onChangeHandler: addressChangeHandler,\n    onBlurHandler: addressBlurHandler,\n    reset: resetAddressInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: cityInput,\n    isValid: enteredCityIsValid,\n    isInvalid: cityInputIsInvalid,\n    onChangeHandler: cityChangeHandler,\n    onBlurHandler: cityBlurHandler,\n    reset: resetCityInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: postCodeInput,\n    isValid: enteredpostCodeIsValid,\n    isInvalid: postCodeInputIsInvalid,\n    onChangeHandler: postCodeChangeHandler,\n    onBlurHandler: postCodeBlurHandler,\n    reset: resetpostCodeInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: countryInput,\n    isValid: enteredcountryIsValid,\n    isInvalid: countryInputIsInvalid,\n    onChangeHandler: countryChangeHandler,\n    onBlurHandler: countryBlurHandler,\n    reset: resetcountryInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientNameInput,\n    isValid: enteredclientNameIsValid,\n    isInvalid: clientNameInputIsInvalid,\n    onChangeHandler: clientNameChangeHandler,\n    onBlurHandler: clientNameBlurHandler,\n    reset: resetclientNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientEmailInput,\n    isValid: enteredclientEmailIsValid,\n    isInvalid: clientEmailInputIsInvalid,\n    onChangeHandler: clientEmailChangeHandler,\n    onBlurHandler: clientEmailBlurHandler,\n    reset: resetclientEmailInput,\n  } = useInput((value) => value.includes(\"@\"));\n\n  const {\n    value: clientAddressInput,\n    isValid: enteredclientAddressIsValid,\n    isInvalid: clientAddressInputIsInvalid,\n    onChangeHandler: clientAddressChangeHandler,\n    onBlurHandler: clientAddressBlurHandler,\n    reset: resetclientAddressInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientCityInput,\n    isValid: enteredclientCityIsValid,\n    isInvalid: clientCityInputIsInvalid,\n    onChangeHandler: clientCityChangeHandler,\n    onBlurHandler: clientCityBlurHandler,\n    reset: resetclientCityInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientPostCodeInput,\n    isValid: enteredclientPostCodeIsValid,\n    isInvalid: clientPostCodeInputIsInvalid,\n    onChangeHandler: clientPostCodeChangeHandler,\n    onBlurHandler: clientPostCodeBlurHandler,\n    reset: resetclientPostCodeInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: clientCountryInput,\n    isValid: enteredclientCountryIsValid,\n    isInvalid: clientCountryInputIsInvalid,\n    onChangeHandler: clientCountryChangeHandler,\n    onBlurHandler: clientCountryBlurHandler,\n    reset: resetclientCountryInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: invoiceDateInput,\n    isValid: enteredinvoiceDateIsValid,\n    isInvalid: invoiceDateInputIsInvalid,\n    onChangeHandler: invoiceDateChangeHandler,\n    onBlurHandler: invoiceDateBlurHandler,\n    reset: resetinvoiceDateInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: descriptionInput,\n    isValid: entereddescriptionIsValid,\n    isInvalid: descriptionInputIsInvalid,\n    onChangeHandler: descriptionChangeHandler,\n    onBlurHandler: descriptionBlurHandler,\n    reset: resetdescriptionInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const resetForm = () => {\n    resetAddressInput();\n    resetCityInput();\n    resetpostCodeInput();\n    resetcountryInput();\n    resetclientCountryInput();\n    resetclientEmailInput();\n    resetclientNameInput();\n    resetclientAddressInput();\n    resetclientCityInput();\n    resetclientPostCodeInput();\n    resetclientCountryInput();\n    resetinvoiceDateInput();\n    setTermValue(\"\");\n    resetdescriptionInput();\n    setInvoiceItemList([]);\n\n    props.closeForm();\n  };\n\n  //On Save and Send Button Clicked\n  const onSaveAndSend = () => {\n    if (\n      !enteredAddressIsValid ||\n      !enteredCityIsValid ||\n      !enteredpostCodeIsValid ||\n      !enteredcountryIsValid ||\n      !enteredclientNameIsValid ||\n      !enteredclientEmailIsValid ||\n      !enteredclientAddressIsValid ||\n      !enteredclientCityIsValid ||\n      !enteredclientPostCodeIsValid ||\n      !enteredclientCountryIsValid ||\n      !enteredinvoiceDateIsValid ||\n      !entereddescriptionIsValid ||\n      termValue === \"\" ||\n      invoiceItemList.length <= 0\n    ) {\n      return;\n    }\n\n    const invoice = {\n      from: {\n        address: addressInput,\n        city: cityInput,\n        postCode: postCodeInput,\n        country: countryInput,\n      },\n      to: {\n        mail: clientEmailInput,\n        name: clientNameInput,\n        address: clientAddressInput,\n        city: clientCityInput,\n        postCode: clientPostCodeInput,\n        country: clientCountryInput,\n      },\n      invoiceDate: invoiceDateInput,\n      terms: termValue,\n      desc: descriptionInput,\n      itemList: invoiceItemList,\n      status: \"Pending\",\n      id: randomId.toString(),\n    };\n\n    dispatch(invoiceActions.addInvoice(invoice));\n\n    resetForm();\n  };\n\n  //On Save as draft Button Clicked\n  const onSaveAsDraft = () => {\n    if (\n      !enteredAddressIsValid ||\n      !enteredCityIsValid ||\n      !enteredpostCodeIsValid ||\n      !enteredcountryIsValid ||\n      !enteredclientNameIsValid ||\n      !enteredclientEmailIsValid ||\n      !enteredclientAddressIsValid ||\n      !enteredclientCityIsValid ||\n      !enteredclientPostCodeIsValid ||\n      !enteredclientCountryIsValid ||\n      !enteredinvoiceDateIsValid ||\n      !entereddescriptionIsValid ||\n      termValue === \"\" ||\n      invoiceItemList.length <= 0\n    ) {\n      return;\n    }\n\n    const invoice = {\n      from: {\n        address: addressInput,\n        city: cityInput,\n        postCode: postCodeInput,\n        country: countryInput,\n      },\n      to: {\n        mail: clientEmailInput,\n        name: clientNameInput,\n        address: clientAddressInput,\n        city: clientCityInput,\n        postCode: clientPostCodeInput,\n        country: clientCountryInput,\n      },\n      invoiceDate: invoiceDateInput,\n      terms: termValue,\n      desc: descriptionInput,\n      itemList: invoiceItemList,\n      status: \"Draft\",\n      id: randomId.toString(),\n    };\n\n    dispatch(invoiceActions.addInvoice(invoice));\n\n    resetForm();\n  };\n\n  //On Discard Button Clicked\n  const ondiscardHandler = (e) => {\n    e.preventDefault();\n\n    resetForm();\n  };\n\n  const backdropClasses = [\n    \"backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClosed\",\n  ];\n\n  const modalClasses = [\"formModal\", props.show ? \"ModalOpen\" : \"ModalClosed\"];\n\n  return (\n    <Fragment>\n      {props.show && (\n        <div\n          onClick={props.closeForm}\n          className={backdropClasses.join(\" \")}\n        ></div>\n      )}\n\n      {props.show && (\n        <div className={modalClasses.join(\" \")}>\n          <button onClick={props.closeForm} className=\"backBtn\">\n            <img src={\"/static/images/icon-arrow-left.svg\"} alt=\"\" />\n            Go Back\n          </button>\n\n          <h2>New Invoice</h2>\n\n          <div className=\"form\">\n            <p>Bill Form</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"address\">Street Address</label>\n              <input\n                value={addressInput}\n                type=\"text\"\n                id=\"address\"\n                onChange={addressChangeHandler}\n                onBlur={addressBlurHandler}\n              />\n              {addressInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"city\">City</label>\n                <input\n                  value={cityInput}\n                  type=\"text\"\n                  id=\"city\"\n                  onChange={cityChangeHandler}\n                  onBlur={cityBlurHandler}\n                />\n                {cityInputIsInvalid && errorText}\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"postCode\">Post Code</label>\n                <input\n                  value={postCodeInput}\n                  type=\"text\"\n                  id=\"postCode\"\n                  onChange={postCodeChangeHandler}\n                  onBlur={postCodeBlurHandler}\n                />\n                {postCodeInputIsInvalid && errorText}\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"country\">Country</label>\n              <input\n                value={countryInput}\n                type=\"text\"\n                id=\"country\"\n                onChange={countryChangeHandler}\n                onBlur={countryBlurHandler}\n              />\n              {countryInputIsInvalid && errorText}\n            </div>\n\n            <p>Bill To</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientName\">Client's Name</label>\n              <input\n                value={clientNameInput}\n                type=\"text\"\n                id=\"clientName\"\n                onChange={clientNameChangeHandler}\n                onBlur={clientNameBlurHandler}\n              />\n              {clientNameInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientEmail\">Client's Email</label>\n              <input\n                value={clientEmailInput}\n                type=\"email\"\n                id=\"clientEmail\"\n                onChange={clientEmailChangeHandler}\n                onBlur={clientEmailBlurHandler}\n              />\n              {clientEmailInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientAddress\">Street Address</label>\n              <input\n                value={clientAddressInput}\n                type=\"text\"\n                id=\"clientAddress\"\n                onChange={clientAddressChangeHandler}\n                onBlur={clientAddressBlurHandler}\n              />\n              {clientAddressInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"clientCity\">City</label>\n                <input\n                  value={clientCityInput}\n                  type=\"text\"\n                  id=\"clientCity\"\n                  onChange={clientCityChangeHandler}\n                  onBlur={clientCityBlurHandler}\n                />\n                {clientCityInputIsInvalid && errorText}\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"clientPostCode\">Post Code</label>\n                <input\n                  value={clientPostCodeInput}\n                  type=\"text\"\n                  id=\"clientPostCode\"\n                  onChange={clientPostCodeChangeHandler}\n                  onBlur={clientPostCodeBlurHandler}\n                />\n                {clientPostCodeInputIsInvalid && errorText}\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientCountry\">Country</label>\n              <input\n                value={clientCountryInput}\n                type=\"text\"\n                id=\"clientCountry\"\n                onChange={clientCountryChangeHandler}\n                onBlur={clientCountryBlurHandler}\n              />\n              {clientCountryInputIsInvalid && errorText}\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"invoiceDate\">Invoice Date</label>\n                <input\n                  value={invoiceDateInput}\n                  type=\"date\"\n                  id=\"invoiceDate\"\n                  onChange={invoiceDateChangeHandler}\n                  onBlur={invoiceDateBlurHandler}\n                />\n                {invoiceDateInputIsInvalid && errorText}\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"paymentTerm\">Payment Term</label>\n                <select onChange={getTermValue}>\n                  <option value=\"1\">Net 1 day</option>\n                  <option value=\"7\">Net 7 days</option>\n                  <option value=\"30\">Net 30 days</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"description\">Project Description</label>\n              <input\n                value={descriptionInput}\n                type=\"text\"\n                id=\"description\"\n                onChange={descriptionChangeHandler}\n                onBlur={descriptionBlurHandler}\n              />\n              {descriptionInputIsInvalid && errorText}\n            </div>\n\n            <h2>Item List</h2>\n\n            <div className=\"itemList\">\n              {component.map((item, i) => (\n                <Item\n                  key={i}\n                  id={i}\n                  onDelete={onDeleteHandler}\n                  onItemValue={getItemValue}\n                />\n              ))}\n            </div>\n\n            <button onClick={onAddItemHandler} className=\"btnAdd\">\n              + Add New item\n            </button>\n\n            <div className=\"btnBox\">\n              <button onClick={ondiscardHandler} className=\"btnDiscard\">\n                Discard\n              </button>\n\n              <div>\n                <button onClick={onSaveAsDraft} className=\"btnDraft\">\n                  Save as draft\n                </button>\n                <button onClick={onSaveAndSend} className=\"btnSend\">\n                  Save & Send\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </Fragment>\n  );\n}\n\nexport default NewForm;\n","import classes from \"./InvoicesPage.module.css\";\nimport Nav from \"../../components/Layout/Nav\";\nimport Layout from \"../../components/Layout/Layout\";\nimport InvoiceList from \"../../components/Invoices/InvoiceList\";\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport NewForm from \"../../components/Form/NewForm\";\n\nfunction InvoicesPage() {\n  const [filterValue, setFilterValue] = useState(\"\");\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const invoices = useSelector((state) => state.allInvoice.invoices);\n\n  const getFilterValueHandler = (value) => {\n    setFilterValue(value);\n  };\n\n  const filteredInvoices = invoices.filter((invoice) => {\n    if (filterValue === \"all\") {\n      return invoice;\n    } else {\n      return invoice.status.toLowerCase().includes(filterValue);\n    }\n  });\n\n  const openFormHandler = () => {\n    setModalOpen(true);\n  };\n\n  const closeFormHandler = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div className={classes.home}>\n      <div className={classes.navBar}>\n        <Nav />\n      </div>\n\n      <div>\n        <Layout\n          openForm={openFormHandler}\n          getFilterValue={getFilterValueHandler}\n        >\n          <InvoiceList invoices={filteredInvoices} />\n        </Layout>\n      </div>\n\n      <NewForm closeForm={closeFormHandler} show={modalOpen} />\n    </div>\n  );\n}\n\nexport default InvoicesPage;\n","import \"./InvoiceDetail.css\";\nimport { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { getDueDate } from \"../../utils/utils\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { invoiceActions } from \"../../store/index-redux\";\nimport { useNavigate } from \"react-router\";\n\nfunction InvoiceDetail(props) {\n  const params = useParams();\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const { invoiceId } = params;\n\n  const invoices = useSelector((state) => state.allInvoice.invoices);\n\n  const invoiceData = invoices.filter((invoice) => invoice.id === invoiceId);\n\n  const invoice = invoiceData[0];\n\n  const dueDate = getDueDate(invoice.invoiceDate, invoice.terms);\n\n  const amount = invoice.itemList.map((item) => item.price * item.qty);\n\n  if (amount.length <= 0) return;\n\n  const totalAmount = amount.reduce((a, b) => a + b);\n\n  const onDeleteHandler = () => {\n    dispatch(invoiceActions.deleteInvoice(invoice.id));\n    navigate(\"/invoices\", { replace: true });\n  };\n\n  const onMarkAsPaidHandler = () => {\n    dispatch(invoiceActions.markInvoiceAsPaid(invoice.id));\n  };\n\n  let color;\n\n  if (invoice.status === \"Paid\") {\n    color = \"green\";\n  } else if (invoice.status === \"Pending\") {\n    color = \"orange\";\n  } else {\n    color = \"grey\";\n  }\n\n  const isPaid = invoice.status === \"Paid\";\n\n  return (\n    <div className=\"container allDetails\">\n      <button onClick={props.onGoBack} className=\"backBtn\">\n        <img src={\"/static/images/icon-arrow-left.svg\"} alt=\"\" />\n        Go Back\n      </button>\n\n      <div className=\"btnDiv\">\n        <div className=\"statusDiv\">\n          <p>Status</p>\n\n          <div className={`status ${color}`}>\n            <span className=\"dot\"></span>\n            <span className=\"statusName\">{invoice.status}</span>\n          </div>\n        </div>\n\n        <div className=\"statusFunctions btnTop\">\n          {!isPaid && (\n            <button onClick={props.openForm} className=\"editInvoiceBtn\">\n              Edit\n            </button>\n          )}\n          <button onClick={onDeleteHandler} className=\"deleteBtn\">\n            Delete\n          </button>\n          {!isPaid && (\n            <button onClick={onMarkAsPaidHandler} className=\"markBtn\">\n              Mark as paid\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"details\">\n        <div className=\"clientInfo\">\n          <span>\n            <p>\n              <span>#</span>\n              {invoice.id}\n            </p>\n            <p>Landing Page Design</p>\n          </span>\n\n          <span className=\"clientShit\">\n            <p>{invoice.from.address}</p>\n            <p>{invoice.from.city}</p>\n            <p>{invoice.from.country}</p>\n            <p>{invoice.from.postCode}</p>\n          </span>\n        </div>\n\n        <div className=\"recieverInfo\">\n          <span>\n            <p>Invoice Date</p>\n            <p className=\"answer\">{invoice.invoiceDate}</p>\n          </span>\n          <span>\n            <p>Bill To</p>\n            <p className=\"answer\">{invoice.to.name}</p>\n          </span>\n          <span>\n            <p>Payment Due</p>\n            <p className=\"answer\">{dueDate}</p>\n          </span>\n          <span>\n            <p>{invoice.to.address}</p>\n            <p>{invoice.to.city}</p>\n            <p>{invoice.to.postCode}</p>\n            <p className=\"countryName\">{invoice.to.country}</p>\n          </span>\n          <span>\n            <p>Send To</p>\n            <p className=\"answer\">{invoice.to.mail}</p>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"checkout\">\n        {invoice.itemList.map((item) => (\n          <Fragment key={item.id}>\n            <div>\n              <span>\n                <p>{item.itemName}</p>\n                <p className=\"checkoutAmount\">\n                  <span>{item.qty}</span>\n                  <span>X</span>£{item.price}\n                </p>\n              </span>\n              <p>£{item.price * item.qty}</p>\n            </div>\n          </Fragment>\n        ))}\n\n        <div className=\"grandTotal\">\n          <p>Grand Total</p>\n          <p className=\"total\">£{totalAmount}</p>\n        </div>\n      </div>\n\n      <div className=\"checkout_desktop\">\n        {invoice.itemList.map((item) => (\n          <div key={item.id} className=\"priceInfo\">\n            <span>\n              <p>Item Name</p>\n              <p>{item.itemName}</p>\n            </span>\n            <span>\n              <p>QTY.</p>\n              <p>{item.qty}</p>\n            </span>\n            <span>\n              <p>Price</p>\n              <p>£{item.price}</p>\n            </span>\n            <span>\n              <p>Total</p>\n              <p>£{item.price * item.qty}</p>\n            </span>\n          </div>\n        ))}\n\n        <div className=\"grandTotal\">\n          <p>Amount Due</p>\n          <p className=\"total\">£{totalAmount}</p>\n        </div>\n      </div>\n\n      <div className=\"split\">\n        <div></div>\n        <div className=\"statusFunctions btnBottom\">\n          <button onClick={props.openForm} className=\"editInvoiceBtn\">\n            Edit\n          </button>\n          <button onClick={onDeleteHandler} className=\"deleteBtn\">\n            Delete\n          </button>\n          {!isPaid && (\n            <button onClick={onMarkAsPaidHandler} className=\"markBtn\">\n              Mark as paid\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InvoiceDetail;\n","import { useRef, useState } from \"react\";\nimport \"./Item.css\";\n\nfunction EditItem(props) {\n  const [btnClicked, setBtnClicked] = useState(false);\n\n  const total = props.price * props.qty;\n\n  const nameInputRef = useRef();\n\n  const qtyInputRef = useRef();\n\n  const priceInputRef = useRef();\n\n  const onSubmitHandler = () => {\n    if (\n      nameInputRef.current.value === \"\" &&\n      qtyInputRef.current.value === \"\" &&\n      priceInputRef.current.value === \"\"\n    ) {\n      return;\n    }\n\n    setBtnClicked(true);\n\n    const invoiceItem = {\n      itemName: nameInputRef.current.value,\n      qty: qtyInputRef.current.value,\n      price: priceInputRef.current.value,\n      total: total,\n      id: props.id,\n    };\n\n    props.onItemValue(invoiceItem);\n  };\n\n  return (\n    <div className=\"item\">\n      <div className=\"formInput\">\n        <label htmlFor=\"itemName\">Item Name</label>\n        <input\n          defaultValue={props.itemName}\n          type=\"text\"\n          id=\"itemName\"\n          ref={nameInputRef}\n        />\n      </div>\n\n      <div className=\"itemGrid\">\n        <div className=\"formInput\">\n          <label htmlFor=\"qty\">Qty.</label>\n          <input\n            defaultValue={props.qty}\n            type=\"number\"\n            id=\"qty\"\n            ref={qtyInputRef}\n          />\n        </div>\n\n        <div className=\"formInput\">\n          <label htmlFor=\"price\">Price</label>\n          <input\n            defaultValue={props.price}\n            type=\"number\"\n            id=\"price\"\n            ref={priceInputRef}\n          />\n        </div>\n\n        <div className=\"total\">\n          <span>Total</span>\n          <p>{total}</p>\n        </div>\n\n        <button className=\"removeItem\">\n          <img src={\"/static/images/icon-delete.svg\"} alt=\"\" />\n        </button>\n\n        <button\n          className=\"btnAddToList\"\n          onClick={onSubmitHandler}\n          disabled={btnClicked}\n        >\n          {!btnClicked && <img src=\"/static/images/icon-plus.svg\" alt=\"\" />}\n          {btnClicked && <img src=\"/static/images/icon-check.svg\" alt=\"\" />}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default EditItem;\n","import \"./NewForm.css\";\nimport Item from \"./Item\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport { invoiceActions } from \"../../store/index-redux\";\nimport EditItem from \"./EditItem\";\nimport { useState, Fragment } from \"react\";\nimport { formatEditDate } from \"../../utils/utils\";\n\nfunction EditForm(props) {\n  const params = useParams();\n\n  const dispatch = useDispatch();\n\n  const { invoiceId } = params;\n\n  const invoices = useSelector((state) => state.allInvoice.invoices);\n\n  const invoiceData = invoices.filter((invoice) => invoice.id === invoiceId);\n\n  const invoice = invoiceData[0];\n\n  //This is all the invoice item Function\n  const [invoiceItemList, setInvoiceItemList] = useState([]);\n\n  const [component, setComponent] = useState([\"sampleComponent\"]);\n\n  const onAddItemHandler = (e) => {\n    e.preventDefault();\n\n    setComponent((prev) => [...prev, \"sampleComponent\"]);\n  };\n\n  const onDeleteHandler = (id) => {\n    setComponent((prev) => prev.filter((item, i) => i !== id));\n  };\n\n  const getItemValue = (value) => {\n    setInvoiceItemList((prev) => [...prev, value]);\n  };\n\n  const getEditItemValue = (value) => {\n    setInvoiceItemList((prev) => [...prev, value]);\n  };\n\n  //This formats the date input\n  const date = formatEditDate(invoice.invoiceDate);\n\n  //The input Ref\n  const [addressInput, setAddressInput] = useState(invoice.from.address);\n\n  const onChangeAddressValue = (e) => {\n    setAddressInput(e.target.value);\n  };\n\n  const [cityInput, setCityInput] = useState(invoice.from.city);\n\n  const onChangeCityValue = (e) => {\n    setCityInput(e.target.value);\n  };\n\n  const [postcodeInput, setPostcodeInput] = useState(invoice.from.postCode);\n\n  const onChangePostCodeValue = (e) => {\n    setPostcodeInput(e.target.value);\n  };\n\n  const [countryInput, setCountryInput] = useState(invoice.from.country);\n\n  const onChangeCountryValue = (e) => {\n    setCountryInput(e.target.value);\n  };\n\n  const [clientNameInput, setClientNameInput] = useState(invoice.to.name);\n\n  const onChangeclientNameValue = (e) => {\n    setClientNameInput(e.target.value);\n  };\n\n  const [clientMailInput, setClientMailInput] = useState(invoice.to.mail);\n\n  const onChangeclientMailValue = (e) => {\n    setClientMailInput(e.target.value);\n  };\n\n  const [clientAddressInput, setClientAddressInput] = useState(\n    invoice.to.address\n  );\n\n  const onChangeclientAddressValue = (e) => {\n    setClientAddressInput(e.target.value);\n  };\n\n  const [clientCityInput, setClientCityInput] = useState(invoice.to.city);\n\n  const onChangeclientCityValue = (e) => {\n    setClientCityInput(e.target.value);\n  };\n\n  const [clientPostCodeInput, setClientPostCodeInput] = useState(\n    invoice.to.postCode\n  );\n\n  const onChangeclientPostCodeValue = (e) => {\n    setClientPostCodeInput(e.target.value);\n  };\n\n  const [clientCountryInput, setClientCountryInput] = useState(\n    invoice.to.country\n  );\n\n  const onChangeclientCountryValue = (e) => {\n    setClientCountryInput(e.target.value);\n  };\n\n  const [invoiceDateInput, setInvoiceDateInput] = useState(date);\n\n  const onChangeInvoiceDateValue = (e) => {\n    setInvoiceDateInput(e.target.value);\n  };\n\n  const [termValue, setTermValue] = useState(invoice.terms);\n\n  const getTermValue = (e) => {\n    if (e.target.value) {\n      setTermValue(e.target.value);\n    }\n  };\n\n  const [descriptionInput, setDescriptionInput] = useState(invoice.desc);\n\n  const onChangeDescriptionValue = (e) => {\n    setDescriptionInput(e.target.value);\n  };\n\n  const onSubmitHandler = () => {\n    if (\n      addressInput === \"\" &&\n      cityInput === \"\" &&\n      postcodeInput === \"\" &&\n      countryInput === \"\" &&\n      clientNameInput === \"\" &&\n      clientMailInput === \"\" &&\n      clientAddressInput === \"\" &&\n      clientCityInput === \"\" &&\n      clientPostCodeInput === \"\" &&\n      clientCountryInput === \"\" &&\n      invoiceDateInput === \"\" &&\n      descriptionInput === \"\" &&\n      termValue === \"\" &&\n      invoiceItemList.length <= 0\n    ) {\n      return;\n    }\n\n    const updatedInvoice = {\n      from: {\n        address: addressInput,\n        city: cityInput,\n        postCode: postcodeInput,\n        country: countryInput,\n      },\n      to: {\n        mail: clientMailInput,\n        name: clientNameInput,\n        address: clientAddressInput,\n        city: clientCityInput,\n        postCode: clientPostCodeInput,\n        country: clientCountryInput,\n      },\n      invoiceDate: invoiceDateInput,\n      terms: termValue,\n      desc: descriptionInput,\n      itemList: invoiceItemList,\n      status: invoice.status,\n      id: invoice.id,\n    };\n\n    dispatch(invoiceActions.updateInvoice(updatedInvoice));\n\n    props.closeForm();\n  };\n\n  const backdropClasses = [\n    \"backdrop\",\n    props.show ? \"BackdropOpen\" : \"BackdropClosed\",\n  ];\n\n  const modalClasses = [\"formModal\", props.show ? \"ModalOpen\" : \"ModalClosed\"];\n\n  return (\n    <Fragment>\n      {props.show && (\n        <div\n          onClick={props.closeForm}\n          className={backdropClasses.join(\" \")}\n        ></div>\n      )}\n\n      {props.show && (\n        <div className={modalClasses.join(\" \")}>\n          <button className=\"backBtn\">\n            <img src={\"/static/images/icon-arrow-left.svg\"} alt=\"\" />\n            Go Back\n          </button>\n\n          <h2>Edit #{invoice.id}</h2>\n\n          <div className=\"form\">\n            <p>Bill Form</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"address\">Street Address</label>\n              <input\n                defaultValue={addressInput}\n                type=\"text\"\n                id=\"address\"\n                onChange={onChangeAddressValue}\n              />\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"city\">City</label>\n                <input\n                  defaultValue={cityInput}\n                  type=\"text\"\n                  id=\"city\"\n                  onChange={onChangeCityValue}\n                />\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"postCode\">Post Code</label>\n                <input\n                  defaultValue={postcodeInput}\n                  type=\"text\"\n                  id=\"postCode\"\n                  onChange={onChangePostCodeValue}\n                />\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"country\">Country</label>\n              <input\n                defaultValue={countryInput}\n                type=\"text\"\n                id=\"country\"\n                onChange={onChangeCountryValue}\n              />\n            </div>\n\n            <p>Bill To</p>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientName\">Client's Name</label>\n              <input\n                defaultValue={clientNameInput}\n                type=\"text\"\n                id=\"clientName\"\n                onChange={onChangeclientNameValue}\n              />\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientEmail\">Client's Email</label>\n              <input\n                defaultValue={clientMailInput}\n                type=\"email\"\n                id=\"clientEmail\"\n                onChange={onChangeclientMailValue}\n              />\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientAddress\">Street Address</label>\n              <input\n                defaultValue={clientAddressInput}\n                type=\"text\"\n                id=\"clientAddress\"\n                onChange={onChangeclientAddressValue}\n              />\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"clientCity\">City</label>\n                <input\n                  defaultValue={clientCityInput}\n                  type=\"text\"\n                  id=\"clientCity\"\n                  onChange={onChangeclientCityValue}\n                />\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"clientPostCode\">Post Code</label>\n                <input\n                  defaultValue={clientPostCodeInput}\n                  type=\"text\"\n                  id=\"clientPostCode\"\n                  onChange={onChangeclientPostCodeValue}\n                />\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"clientCountry\">Country</label>\n              <input\n                defaultValue={clientCountryInput}\n                type=\"text\"\n                id=\"clientCountry\"\n                onChange={onChangeclientCountryValue}\n              />\n            </div>\n\n            <div className=\"formGrid\">\n              <div className=\"formInput\">\n                <label htmlFor=\"invoiceDate\">Invoice Date</label>\n                <input\n                  type=\"date\"\n                  id=\"invoiceDate\"\n                  defaultValue={invoiceDateInput}\n                  onChange={onChangeInvoiceDateValue}\n                />\n              </div>\n\n              <div className=\"formInput\">\n                <label htmlFor=\"paymentTerm\">Payment Term</label>\n                <select onClick={getTermValue} defaultValue={termValue}>\n                  <option value=\"1\">Net 1 day</option>\n                  <option value=\"7\">Net 7 days</option>\n                  <option value=\"30\">Net 30 days</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"formInput\">\n              <label htmlFor=\"description\">Project Description</label>\n              <input\n                defaultValue={descriptionInput}\n                type=\"text\"\n                id=\"description\"\n                onChange={onChangeDescriptionValue}\n              />\n            </div>\n\n            <h2>Item List</h2>\n\n            <div className=\"itemList\">\n              {invoice.itemList.map((item, i) => (\n                <EditItem\n                  key={i}\n                  itemName={item.itemName}\n                  qty={item.qty}\n                  price={item.price}\n                  onItemValue={getEditItemValue}\n                />\n              ))}\n\n              {component.map((item, i) => (\n                <Item\n                  key={i}\n                  id={i}\n                  onDelete={onDeleteHandler}\n                  onItemValue={getItemValue}\n                />\n              ))}\n            </div>\n\n            <button onClick={onAddItemHandler} className=\"btnAdd\">\n              + Add New item\n            </button>\n\n            <div className=\"btnBox\">\n              <div></div>\n\n              <div>\n                <button onClick={props.closeForm} className=\"btnCancel\">\n                  Cancel\n                </button>\n                <button\n                  disabled={invoiceItemList.length <= 0}\n                  onClick={onSubmitHandler}\n                  className=\"btnSaveChanges\"\n                >\n                  Save Changes\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </Fragment>\n  );\n}\n\nexport default EditForm;\n","import InvoiceDetail from \"../../components/InvoiceDetail/InvoiceDetail\";\nimport Nav from \"../../components/Layout/Nav\";\nimport classes from \"./Invoice.module.css\";\nimport { useNavigate } from \"react-router\";\nimport EditForm from \"../../components/Form/EditForm\";\nimport { useState } from \"react\";\n\nfunction InvoicePage() {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const navigate = useNavigate();\n\n  const onGoBackHandler = () => {\n    navigate(\"/invoices\", { replace: true });\n  };\n\n  const openFormHandler = () => {\n    setModalOpen(true);\n  };\n\n  const closeFormHandler = () => {\n    setModalOpen(false);\n  };\n\n  window.onload = function () {\n    window.location = \"/invoices\";\n  };\n\n  return (\n    <div className={classes.invoice}>\n      <div className={classes.navBar}>\n        <Nav />\n      </div>\n\n      <InvoiceDetail onGoBack={onGoBackHandler} openForm={openFormHandler} />\n\n      <EditForm closeForm={closeFormHandler} show={modalOpen} />\n    </div>\n  );\n}\n\nexport default InvoicePage;\n","import AuthPage from \"./pages/AuthPage/AuthPage\";\nimport HomePage from \"./pages/HomePage/HomePage\";\nimport InvoicesPage from \"./pages/Invoices/InvoicesPage\";\nimport InvoicePage from \"./pages/invoice/InvoicePage\";\nimport { Routes, Route } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchInvoiceData, sendInvoiceData } from \"./store/invoice-actions\";\nimport { useContext, useEffect } from \"react\";\nimport AuthContext from \"./store/auth-context\";\n\nlet isInitial = true;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const invoices = useSelector((state) => state.allInvoice);\n\n  const authCtx = useContext(AuthContext);\n\n  useEffect(() => {\n    dispatch(\n      fetchInvoiceData(\n        `https://invoices-49204-default-rtdb.firebaseio.com/${authCtx.localId}.json`\n      )\n    );\n  }, [dispatch, authCtx.localId]);\n\n  useEffect(() => {\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n\n    if (invoices.changed) {\n      dispatch(\n        sendInvoiceData(\n          invoices,\n          `https://invoices-49204-default-rtdb.firebaseio.com/${authCtx.localId}.json`\n        )\n      );\n    }\n  }, [dispatch, invoices, authCtx.localId]);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n\n      {!authCtx.isLoggedIn && <Route path=\"/auth\" element={<AuthPage />} />}\n\n      <Route\n        path=\"/invoices\"\n        element={authCtx.isLoggedIn ? <InvoicesPage /> : <AuthPage />}\n      />\n\n      <Route path=\"/invoices/:invoiceId\" element={<InvoicePage />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","import { invoiceActions } from \"./index-redux\";\n\nexport const fetchInvoiceData = (page) => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const res = await fetch(page);\n\n      if (!res.ok) throw new Error(\"Something went wrong...\");\n\n      const data = await res.json();\n\n      console.log(data);\n\n      const result = [];\n\n      for (const key in data) {\n        result.push(data[key].invoices);\n      }\n\n      const invoices = result[0].map((invoice) => invoice);\n\n      console.log(invoices);\n\n      return invoices;\n    };\n\n    try {\n      const invoiceData = await fetchData();\n\n      dispatch(\n        invoiceActions.replaceInvoices({\n          invoices: invoiceData || [],\n          totalInvoices: invoiceData.length,\n        })\n      );\n    } catch (err) {\n      console.log(\"Could not get invoice\");\n      console.error(err);\n    }\n  };\n};\n\nexport const sendInvoiceData = (invoices, page) => {\n  return async () => {\n    const sendRequest = async () => {\n      const res = await fetch(page, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          invoices: invoices,\n          totalInvoices: invoices.length,\n        }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Something went wrong...\");\n      }\n    };\n\n    try {\n      await sendRequest();\n    } catch (err) {\n      console.log(\"Could not send invoice\");\n      console.log(err);\n    }\n  };\n};\n","import ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index-redux\";\nimport { AuthContextProvider } from \"./store/auth-context\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <AuthContextProvider>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </AuthContextProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}